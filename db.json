{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/test.png","path":"img/test.png","modified":0,"renderable":0},{"_id":"themes/Yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"51ce6d70ce137467c14d30acf1803640bef50aa7","modified":1488297551000},{"_id":"themes/Yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1484444075000},{"_id":"themes/Yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1484444075000},{"_id":"themes/Yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1484444075000},{"_id":"themes/Yelee/_config.yml","hash":"622d1c761128b645e0316441fa7bf1160dee7d38","modified":1484444075000},{"_id":"source/_posts/1月总结.md","hash":"b0e7f187d7d35eafef58aba4e498a05ae2227f14","modified":1486052781000},{"_id":"source/_posts/.DS_Store","hash":"3761b33a31e198cd4c025d05f92ae33f53913569","modified":1486048636000},{"_id":"source/_posts/AndroidStudio工具学习篇.md","hash":"6d620a449ee7fadd4890671b9b0ab91b0d558838","modified":1486308081000},{"_id":"source/_posts/Android动画学习.md","hash":"bfb41adca4c92f7d6e8c4e4dda7c0af59d9b72f4","modified":1485741950000},{"_id":"source/_posts/VIM使用技巧.md","hash":"cca5af43065c8acb5c45852c885bb850b5f30df9","modified":1484448405000},{"_id":"source/_posts/hexo博客搭建常见问题.md","hash":"091639272ef60e1cfb42edbb16573f9efa889651","modified":1488297682000},{"_id":"source/_posts/React_native学习.md","hash":"0aeccaf04ed8bfc77fd6234ba6b52a044532bff4","modified":1484448277000},{"_id":"source/_posts/Gradle工具学习.md","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1485350544000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1485351398000},{"_id":"source/_posts/markdown常用语法回顾.md","hash":"f118f1b0a04964d5b15880154ebb10629966a4a2","modified":1484448321000},{"_id":"source/_posts/使用Freeline提高编译效率.md","hash":"f706bb95637f2f427521ab57998b28e183adcf49","modified":1484448230000},{"_id":"source/_posts/关于项目中时间分配的问题.md","hash":"078d232cec6519d9b248a565eccd37b1320d537a","modified":1488198829000},{"_id":"source/_posts/代码规范.md","hash":"c95c7b51661d5099360ebaf1b1cee71093f90bd1","modified":1484447716000},{"_id":"source/_posts/开发中生活中的小习惯.md","hash":"6f2c239f6ed221df7e4fc8372d01e58b41a951a6","modified":1484448167000},{"_id":"source/_posts/国外推送方案调研.md","hash":"8484417650891f2e472353852e75784e8e2e85f7","modified":1488208934000},{"_id":"source/_posts/开发经验.md","hash":"1c5fb983d1a0fdb3ebe893e9162f462479913520","modified":1485015741000},{"_id":"source/_posts/如何搭建github博客.md","hash":"c8b1a03a0b337f4d08b09f95b887813e1a8ba7bc","modified":1485351071000},{"_id":"source/_posts/我的书单.md","hash":"c549101e5b0b3a0201ddb38efac066023a8e3a97","modified":1488175039000},{"_id":"source/_posts/配置github环境命令.md","hash":"f4133b4822d48ceef14d399ab2a91c657b2efa5d","modified":1484448187000},{"_id":"source/img/test.png","hash":"aecec622dfa0d50707863959b6204ee32b6a4955","modified":1488297464000},{"_id":"themes/Yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1484444075000},{"_id":"themes/Yelee/.github/ISSUE_TEMPLATE.md","hash":"09e2580d457ce93b4d7d554b75618036b45f8717","modified":1484444075000},{"_id":"themes/Yelee/.git/config","hash":"900873b633dea689f1f85eb22fdcad2ff83c0a23","modified":1484444075000},{"_id":"themes/Yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1484444024000},{"_id":"themes/Yelee/.git/index","hash":"9e9150ae18d8de7ebb15f696e080527c26b9501f","modified":1484445636000},{"_id":"themes/Yelee/.git/packed-refs","hash":"fad6a43ad617793304d9241562a71596db559018","modified":1484444075000},{"_id":"themes/Yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1484444075000},{"_id":"themes/Yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1484444075000},{"_id":"themes/Yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1484444075000},{"_id":"themes/Yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1484444075000},{"_id":"themes/Yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1484444075000},{"_id":"themes/Yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1484444075000},{"_id":"themes/Yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1484444075000},{"_id":"themes/Yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1484444075000},{"_id":"themes/Yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1484444075000},{"_id":"themes/Yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1484444075000},{"_id":"themes/Yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1484444075000},{"_id":"themes/Yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1484444075000},{"_id":"themes/Yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1484444075000},{"_id":"themes/Yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1484444024000},{"_id":"themes/Yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1484444024000},{"_id":"themes/Yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1484444024000},{"_id":"themes/Yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1484444024000},{"_id":"themes/Yelee/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1484444024000},{"_id":"themes/Yelee/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1484444024000},{"_id":"themes/Yelee/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1484444024000},{"_id":"themes/Yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1484444024000},{"_id":"themes/Yelee/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1484444024000},{"_id":"themes/Yelee/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1484444024000},{"_id":"themes/Yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1484444024000},{"_id":"themes/Yelee/.git/logs/HEAD","hash":"9be04f590fe8d2c3c1d373411ba678fac5699fbc","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1484444075000},{"_id":"themes/Yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1484444075000},{"_id":"themes/Yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1484444075000},{"_id":"themes/Yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1484444075000},{"_id":"themes/Yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1484444075000},{"_id":"themes/Yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1484444075000},{"_id":"themes/Yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1484444075000},{"_id":"themes/Yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1484444075000},{"_id":"themes/Yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1484444075000},{"_id":"themes/Yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1484444075000},{"_id":"themes/Yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1484444075000},{"_id":"themes/Yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1484444075000},{"_id":"themes/Yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1484444075000},{"_id":"themes/Yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1484444075000},{"_id":"themes/Yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1484444075000},{"_id":"themes/Yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1484444075000},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1484444075000},{"_id":"themes/Yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1484444075000},{"_id":"themes/Yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1484444075000},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1484444075000},{"_id":"themes/Yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1484444075000},{"_id":"themes/Yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1484444075000},{"_id":"themes/Yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1484444075000},{"_id":"themes/Yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1484444075000},{"_id":"themes/Yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1484444075000},{"_id":"themes/Yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1484444075000},{"_id":"themes/Yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1484444075000},{"_id":"themes/Yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1484444075000},{"_id":"themes/Yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1484444075000},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1484444075000},{"_id":"themes/Yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1484444075000},{"_id":"themes/Yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1484444075000},{"_id":"themes/Yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1484444075000},{"_id":"themes/Yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1484444075000},{"_id":"themes/Yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1484444075000},{"_id":"themes/Yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1484444075000},{"_id":"themes/Yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1484444075000},{"_id":"themes/Yelee/.git/refs/heads/master","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1484444075000},{"_id":"themes/Yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1484444075000},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1484444075000},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1484444075000},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1484444075000},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1484444075000},{"_id":"themes/Yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1484444075000},{"_id":"themes/Yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1484444075000},{"_id":"themes/Yelee/.git/objects/pack/pack-5f45d7de5f257b01a7bf76de58fbe8feec56e22e.idx","hash":"d3a1bb09371aa8f638615721d6b34fb832ec66b9","modified":1484444075000},{"_id":"themes/Yelee/.git/logs/refs/heads/master","hash":"9be04f590fe8d2c3c1d373411ba678fac5699fbc","modified":1484444075000},{"_id":"themes/Yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1484444075000},{"_id":"themes/Yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1484444075000},{"_id":"themes/Yelee/.git/logs/refs/remotes/origin/HEAD","hash":"9be04f590fe8d2c3c1d373411ba678fac5699fbc","modified":1484444075000},{"_id":"themes/Yelee/.git/objects/pack/pack-5f45d7de5f257b01a7bf76de58fbe8feec56e22e.pack","hash":"b8fd33f5bc0de522f7747e3ce2ed22240151bc88","modified":1484444075000},{"_id":"public/search.xml","hash":"04da02770fd0722630292c9240aaca38a6174d50","modified":1488297694497},{"_id":"public/archives/2017/01/page/2/index.html","hash":"126462a8ec8853a610b6401355d037df7a77f3eb","modified":1488297694664},{"_id":"public/archives/2017/02/index.html","hash":"ecfb7376aa44740d3509b084f8c561c6412026bd","modified":1488297694665},{"_id":"public/2017/02/27/国外推送方案调研/index.html","hash":"ed3f7f163945f59f5debf5af89269da3c809bad7","modified":1488297694665},{"_id":"public/2017/02/12/关于项目中时间分配的问题/index.html","hash":"ea9eb5ebe6403edded34bc61a35d92c0de0e601d","modified":1488297694665},{"_id":"public/2017/02/05/AndroidStudio工具学习篇/index.html","hash":"975d6ea725c5dd2651e2a7ca503e1f325fd53b11","modified":1488297694665},{"_id":"public/2017/02/05/我的书单/index.html","hash":"421944998175fc76cd248e05619b19d3800d8441","modified":1488297694665},{"_id":"public/2017/02/02/1月总结/index.html","hash":"1ecc0b2849f05d0d43f82efe7b66f0b5dc1d834e","modified":1488297694665},{"_id":"public/2017/01/29/Android动画学习/index.html","hash":"f0219ff8cc3ea027d87c69c0801ed53e04867d8d","modified":1488297694665},{"_id":"public/2017/01/25/Gradle工具学习/index.html","hash":"1b13b9c761b2117a5ff635602993954906967bfa","modified":1488297694665},{"_id":"public/2017/01/22/开发经验/index.html","hash":"f6aa9972e9da18d5c5eda20fd0d3c5de560f1ae8","modified":1488297694665},{"_id":"public/2017/01/15/hexo博客搭建常见问题/index.html","hash":"0d798517f1109b69fcf57a6a011f398192041172","modified":1488297694665},{"_id":"public/2017/01/15/hello-world/index.html","hash":"9911032e8c2cb8e9b8facce726f8a092ae49f505","modified":1488297694665},{"_id":"public/2017/01/14/代码规范/index.html","hash":"3342a595aa824572370bcdb5924d420eebe49ecf","modified":1488297694665},{"_id":"public/2017/01/12/VIM使用技巧/index.html","hash":"3c055d261bc539f76d6cca44207aa75a0881033f","modified":1488297694666},{"_id":"public/2017/01/07/使用Freeline提高编译效率/index.html","hash":"35034604c968a7911db95118fac5765e317d8a24","modified":1488297694666},{"_id":"public/2017/01/05/开发中生活中的小习惯/index.html","hash":"37bf1f218fdac7e08d300aba479016507cdf201f","modified":1488297694666},{"_id":"public/2017/01/05/markdown常用语法回顾/index.html","hash":"f3f419426b175e2979b80e429a2578b3fb99d360","modified":1488297694666},{"_id":"public/2017/01/04/如何搭建github博客/index.html","hash":"971575f94e2a8a3d1983331bf993343e9229e31f","modified":1488297694666},{"_id":"public/2017/01/04/React_native学习/index.html","hash":"a9db567fa3f0ecbcef320860fe9690f183489c73","modified":1488297694666},{"_id":"public/2017/01/04/配置github环境命令/index.html","hash":"03765f5f0acf317bb558d25150e2c3a52139c515","modified":1488297694666},{"_id":"public/archives/index.html","hash":"906a47449dd9a2751c5580044ddb33510a1c7d97","modified":1488297694666},{"_id":"public/archives/page/2/index.html","hash":"106cbf5a137b8ec1e70e9afd6851340576b98627","modified":1488297694666},{"_id":"public/archives/2017/index.html","hash":"411d9d8b8baeef8ab7702b3757dc61f78b4fd481","modified":1488297694666},{"_id":"public/archives/2017/page/2/index.html","hash":"39cc21e7b5e9805518327dad255f094cd8752154","modified":1488297694667},{"_id":"public/archives/2017/01/index.html","hash":"83c5d83714e0f6f0016c5f34acf0f49d10fedb97","modified":1488297694667},{"_id":"public/index.html","hash":"7d507df9f98e1b784044e6b1ebff885148d37ea8","modified":1488297694667},{"_id":"public/page/2/index.html","hash":"06f6abfff1f4ab8d0775cd7226396405d93afebf","modified":1488297694667},{"_id":"public/img/test.png","hash":"aecec622dfa0d50707863959b6204ee32b6a4955","modified":1488297694674},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1488297694674},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1488297694674},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1488297694674},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1488297694674},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1488297694674},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1488297694674},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1488297694674},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1488297694674},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1488297694675},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1488297694675},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1488297694675},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1488297694675},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1488297694675},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1488297694675},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1488297694675},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1488297694675},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1488297694675},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1488297694675},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1488297694675},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1488297694675},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1488297694675},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1488297694675},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1488297694675},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1488297694675},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1488297694675},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1488297694675},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1488297694675},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1488297694675},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1488297694675},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1488297695620},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1488297695623},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1488297695629},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1488297695629},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1488297695629},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1488297695629},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1488297695629},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1488297695629},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1488297695629},{"_id":"public/css/style.css","hash":"e62c44a56606d8d75933cdf49a1a0e42d9f81845","modified":1488297695629}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"1月总结","_content":"   又到了回顾上个月的总结和目标完成的情况了。1月参与了公司涂鸦智能2.0项目的研发。在开发的过程中，发现自己踩了很多的坑，周边的大牛也给了很多的指点，走了很多弯路，在走弯路的过程中，有些地方还是值得引起重视的。1.个人习惯问题：在使用工具的时候，不熟练:1.AndroidStudio相关的快捷键没有形成体系化。2.研发过程中有些基础相关的知识还需要巩固：例如Android5.0新推出的组件:CoordnatorLayout，RecyclerView的使用，封装通用的RecyclerView的Adapter。在主页开发中，探索使用了两种方案:使用NestedScrollView嵌套RecyclerView的方式去实现。熟悉和掌握了MVP设计模式中的一些基本原理，开发中又学习了动画相关的内容。使用了CardView,碰到了很多低版本手机的兼容性问题。幸好在同事的帮助下，在复杂的布局中，通过查看源代码方式去一步步分析问题的原因，曲曲折折走了很多弯路，结果还算是整出了一个产品，可以提测，发现效果和预计的相差较大。 最后整理了一些文案，简单的回顾了一些LInux命令，拾起了将近1年未碰的LInux命令。总之一句话：后期回顾整个过程，发现很零散，自己前期在开发中，没有一个很明确的目标，我要做成什么样子，最终达到什么样的目标。再向目标靠近的时候，需要什么样的知识，如何去整理归纳这些知识，达到系统化，让自己在工作中 游刃有余。后来和领导交流了许多，发现自己在定制目标之前，应该有一个很详细的时间安排计划，让自己落实到每个细小点，然后采用todolist的方式，各个击破，在开始做项目之前，就应该做到了解自己，自己还有什么知识是欠缺的，需要恶补一下。最最重要的一点是：需要把学习的时间也纳入到计划中去。也许在项目未开始之前，知道自己欠缺的情况下，我可以单独的拿出一整天时间去学习这些知识，然后就会发现：实际开发中，因为之前自己做了充足的准备，碰到问题解决问题的时候才会游刃有余。这样也就不会有慌乱的感觉了。所以，知道了自己的不足，就应该立刻行动起来。在2月份的时候，应该让自己有个完整的规划。否则当deadline到来的时候，发现自己精力和体力已经不足以维持最后的研发任务，整个项目质量下降不说，还会让自己陷入了无限的恶性循环中。\n\t本月自己根据项目的需求，自己回顾了自定义组件相关的基础知识，结合动画和RecyclerView，自己写了一个运用自定义组件和动画知识加载RecyclerView头部动画的案例，有些简陋，但是整个练习的过程，对数学知识,Canvas绘画机制，RecyclerView如何在不破坏原有Adapter基础上添加扩展性能的知识有了整体的运用。本月将继续维护此项目：添加如下支持：和风api的集成，Retrofit网络访问库的集成，使用RxJava做相关线程切换。使用MVP设计模式对业务逻辑进行剥离。动画流畅性优化。[https://github.com/weipingQin/RecyclerViewProject]\n总之，来到了涂鸦，我发现一点：每天进步一点点，要让自己快速成长，就必须知道自己的不足，对自己有更高的要求，哪块知识不足就补充哪块的短板。实践才能出真知，在实际开发中，不要对碰到的问题心存恐惧，要学会踩坑，踩过的坑要整理要总结。1月的终点应该要是2月目标的起点，每个月都让自己不断的进步，一年下来你发现：你也会慢慢的有所收获。\n\n","source":"_posts/1月总结.md","raw":"---\ntitle: 1月总结\n---\n   又到了回顾上个月的总结和目标完成的情况了。1月参与了公司涂鸦智能2.0项目的研发。在开发的过程中，发现自己踩了很多的坑，周边的大牛也给了很多的指点，走了很多弯路，在走弯路的过程中，有些地方还是值得引起重视的。1.个人习惯问题：在使用工具的时候，不熟练:1.AndroidStudio相关的快捷键没有形成体系化。2.研发过程中有些基础相关的知识还需要巩固：例如Android5.0新推出的组件:CoordnatorLayout，RecyclerView的使用，封装通用的RecyclerView的Adapter。在主页开发中，探索使用了两种方案:使用NestedScrollView嵌套RecyclerView的方式去实现。熟悉和掌握了MVP设计模式中的一些基本原理，开发中又学习了动画相关的内容。使用了CardView,碰到了很多低版本手机的兼容性问题。幸好在同事的帮助下，在复杂的布局中，通过查看源代码方式去一步步分析问题的原因，曲曲折折走了很多弯路，结果还算是整出了一个产品，可以提测，发现效果和预计的相差较大。 最后整理了一些文案，简单的回顾了一些LInux命令，拾起了将近1年未碰的LInux命令。总之一句话：后期回顾整个过程，发现很零散，自己前期在开发中，没有一个很明确的目标，我要做成什么样子，最终达到什么样的目标。再向目标靠近的时候，需要什么样的知识，如何去整理归纳这些知识，达到系统化，让自己在工作中 游刃有余。后来和领导交流了许多，发现自己在定制目标之前，应该有一个很详细的时间安排计划，让自己落实到每个细小点，然后采用todolist的方式，各个击破，在开始做项目之前，就应该做到了解自己，自己还有什么知识是欠缺的，需要恶补一下。最最重要的一点是：需要把学习的时间也纳入到计划中去。也许在项目未开始之前，知道自己欠缺的情况下，我可以单独的拿出一整天时间去学习这些知识，然后就会发现：实际开发中，因为之前自己做了充足的准备，碰到问题解决问题的时候才会游刃有余。这样也就不会有慌乱的感觉了。所以，知道了自己的不足，就应该立刻行动起来。在2月份的时候，应该让自己有个完整的规划。否则当deadline到来的时候，发现自己精力和体力已经不足以维持最后的研发任务，整个项目质量下降不说，还会让自己陷入了无限的恶性循环中。\n\t本月自己根据项目的需求，自己回顾了自定义组件相关的基础知识，结合动画和RecyclerView，自己写了一个运用自定义组件和动画知识加载RecyclerView头部动画的案例，有些简陋，但是整个练习的过程，对数学知识,Canvas绘画机制，RecyclerView如何在不破坏原有Adapter基础上添加扩展性能的知识有了整体的运用。本月将继续维护此项目：添加如下支持：和风api的集成，Retrofit网络访问库的集成，使用RxJava做相关线程切换。使用MVP设计模式对业务逻辑进行剥离。动画流畅性优化。[https://github.com/weipingQin/RecyclerViewProject]\n总之，来到了涂鸦，我发现一点：每天进步一点点，要让自己快速成长，就必须知道自己的不足，对自己有更高的要求，哪块知识不足就补充哪块的短板。实践才能出真知，在实际开发中，不要对碰到的问题心存恐惧，要学会踩坑，踩过的坑要整理要总结。1月的终点应该要是2月目标的起点，每个月都让自己不断的进步，一年下来你发现：你也会慢慢的有所收获。\n\n","slug":"1月总结","published":1,"date":"2017-02-02T15:15:53.000Z","updated":"2017-02-02T16:26:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q5q0000lyjde54m7r3j","content":"<p>   又到了回顾上个月的总结和目标完成的情况了。1月参与了公司涂鸦智能2.0项目的研发。在开发的过程中，发现自己踩了很多的坑，周边的大牛也给了很多的指点，走了很多弯路，在走弯路的过程中，有些地方还是值得引起重视的。1.个人习惯问题：在使用工具的时候，不熟练:1.AndroidStudio相关的快捷键没有形成体系化。2.研发过程中有些基础相关的知识还需要巩固：例如Android5.0新推出的组件:CoordnatorLayout，RecyclerView的使用，封装通用的RecyclerView的Adapter。在主页开发中，探索使用了两种方案:使用NestedScrollView嵌套RecyclerView的方式去实现。熟悉和掌握了MVP设计模式中的一些基本原理，开发中又学习了动画相关的内容。使用了CardView,碰到了很多低版本手机的兼容性问题。幸好在同事的帮助下，在复杂的布局中，通过查看源代码方式去一步步分析问题的原因，曲曲折折走了很多弯路，结果还算是整出了一个产品，可以提测，发现效果和预计的相差较大。 最后整理了一些文案，简单的回顾了一些LInux命令，拾起了将近1年未碰的LInux命令。总之一句话：后期回顾整个过程，发现很零散，自己前期在开发中，没有一个很明确的目标，我要做成什么样子，最终达到什么样的目标。再向目标靠近的时候，需要什么样的知识，如何去整理归纳这些知识，达到系统化，让自己在工作中 游刃有余。后来和领导交流了许多，发现自己在定制目标之前，应该有一个很详细的时间安排计划，让自己落实到每个细小点，然后采用todolist的方式，各个击破，在开始做项目之前，就应该做到了解自己，自己还有什么知识是欠缺的，需要恶补一下。最最重要的一点是：需要把学习的时间也纳入到计划中去。也许在项目未开始之前，知道自己欠缺的情况下，我可以单独的拿出一整天时间去学习这些知识，然后就会发现：实际开发中，因为之前自己做了充足的准备，碰到问题解决问题的时候才会游刃有余。这样也就不会有慌乱的感觉了。所以，知道了自己的不足，就应该立刻行动起来。在2月份的时候，应该让自己有个完整的规划。否则当deadline到来的时候，发现自己精力和体力已经不足以维持最后的研发任务，整个项目质量下降不说，还会让自己陷入了无限的恶性循环中。<br>    本月自己根据项目的需求，自己回顾了自定义组件相关的基础知识，结合动画和RecyclerView，自己写了一个运用自定义组件和动画知识加载RecyclerView头部动画的案例，有些简陋，但是整个练习的过程，对数学知识,Canvas绘画机制，RecyclerView如何在不破坏原有Adapter基础上添加扩展性能的知识有了整体的运用。本月将继续维护此项目：添加如下支持：和风api的集成，Retrofit网络访问库的集成，使用RxJava做相关线程切换。使用MVP设计模式对业务逻辑进行剥离。动画流畅性优化。[<a href=\"https://github.com/weipingQin/RecyclerViewProject\" target=\"_blank\" rel=\"external\">https://github.com/weipingQin/RecyclerViewProject</a>]<br>总之，来到了涂鸦，我发现一点：每天进步一点点，要让自己快速成长，就必须知道自己的不足，对自己有更高的要求，哪块知识不足就补充哪块的短板。实践才能出真知，在实际开发中，不要对碰到的问题心存恐惧，要学会踩坑，踩过的坑要整理要总结。1月的终点应该要是2月目标的起点，每个月都让自己不断的进步，一年下来你发现：你也会慢慢的有所收获。</p>\n","excerpt":"","more":"<p>   又到了回顾上个月的总结和目标完成的情况了。1月参与了公司涂鸦智能2.0项目的研发。在开发的过程中，发现自己踩了很多的坑，周边的大牛也给了很多的指点，走了很多弯路，在走弯路的过程中，有些地方还是值得引起重视的。1.个人习惯问题：在使用工具的时候，不熟练:1.AndroidStudio相关的快捷键没有形成体系化。2.研发过程中有些基础相关的知识还需要巩固：例如Android5.0新推出的组件:CoordnatorLayout，RecyclerView的使用，封装通用的RecyclerView的Adapter。在主页开发中，探索使用了两种方案:使用NestedScrollView嵌套RecyclerView的方式去实现。熟悉和掌握了MVP设计模式中的一些基本原理，开发中又学习了动画相关的内容。使用了CardView,碰到了很多低版本手机的兼容性问题。幸好在同事的帮助下，在复杂的布局中，通过查看源代码方式去一步步分析问题的原因，曲曲折折走了很多弯路，结果还算是整出了一个产品，可以提测，发现效果和预计的相差较大。 最后整理了一些文案，简单的回顾了一些LInux命令，拾起了将近1年未碰的LInux命令。总之一句话：后期回顾整个过程，发现很零散，自己前期在开发中，没有一个很明确的目标，我要做成什么样子，最终达到什么样的目标。再向目标靠近的时候，需要什么样的知识，如何去整理归纳这些知识，达到系统化，让自己在工作中 游刃有余。后来和领导交流了许多，发现自己在定制目标之前，应该有一个很详细的时间安排计划，让自己落实到每个细小点，然后采用todolist的方式，各个击破，在开始做项目之前，就应该做到了解自己，自己还有什么知识是欠缺的，需要恶补一下。最最重要的一点是：需要把学习的时间也纳入到计划中去。也许在项目未开始之前，知道自己欠缺的情况下，我可以单独的拿出一整天时间去学习这些知识，然后就会发现：实际开发中，因为之前自己做了充足的准备，碰到问题解决问题的时候才会游刃有余。这样也就不会有慌乱的感觉了。所以，知道了自己的不足，就应该立刻行动起来。在2月份的时候，应该让自己有个完整的规划。否则当deadline到来的时候，发现自己精力和体力已经不足以维持最后的研发任务，整个项目质量下降不说，还会让自己陷入了无限的恶性循环中。<br>    本月自己根据项目的需求，自己回顾了自定义组件相关的基础知识，结合动画和RecyclerView，自己写了一个运用自定义组件和动画知识加载RecyclerView头部动画的案例，有些简陋，但是整个练习的过程，对数学知识,Canvas绘画机制，RecyclerView如何在不破坏原有Adapter基础上添加扩展性能的知识有了整体的运用。本月将继续维护此项目：添加如下支持：和风api的集成，Retrofit网络访问库的集成，使用RxJava做相关线程切换。使用MVP设计模式对业务逻辑进行剥离。动画流畅性优化。[<a href=\"https://github.com/weipingQin/RecyclerViewProject\">https://github.com/weipingQin/RecyclerViewProject</a>]<br>总之，来到了涂鸦，我发现一点：每天进步一点点，要让自己快速成长，就必须知道自己的不足，对自己有更高的要求，哪块知识不足就补充哪块的短板。实践才能出真知，在实际开发中，不要对碰到的问题心存恐惧，要学会踩坑，踩过的坑要整理要总结。1月的终点应该要是2月目标的起点，每个月都让自己不断的进步，一年下来你发现：你也会慢慢的有所收获。</p>\n"},{"title":"AndroidStudio工具学习","_content":"  \n  # 选中 \n  - 三击改行可以选中一整行 \n  - Shift + 向上和向下箭头可以选中相邻文本 \n  - Cmd + , 激活设置菜单 \n\n  # 查找最近的文件 \n  - 使用Command + E 可以查找最近的文件 \n  - Command+ B 跳转至定义\n  - Cmd + N 查找类 或者按两次shift \n\n  # 便捷操作 \n  - Cmd + J 打开代码模板，可以使用常用的代码模板 \n\n  # Git相关\n  - 按下Cmd + 9 打开git的日志显示窗口 \n  - Git代码比较 show diff的时候按下左上角的向下向上的箭头查看比较 \n\n  # 对特定条件的断点进行调试 \n  - 单击附着在左侧的红色端点 然后会出现对话框,点击Condition输入框中填写相关的调试的条件即可。\n\n  # SDK扩展工具 \n  - Android设备监控器 Android Device Monitor:\n## 1.分配跟踪器 \n## 2.层次查看器\n### 3.内存监视器 \n### 4.\n\n","source":"_posts/AndroidStudio工具学习篇.md","raw":"---\ntitle: AndroidStudio工具学习\n---\n  \n  # 选中 \n  - 三击改行可以选中一整行 \n  - Shift + 向上和向下箭头可以选中相邻文本 \n  - Cmd + , 激活设置菜单 \n\n  # 查找最近的文件 \n  - 使用Command + E 可以查找最近的文件 \n  - Command+ B 跳转至定义\n  - Cmd + N 查找类 或者按两次shift \n\n  # 便捷操作 \n  - Cmd + J 打开代码模板，可以使用常用的代码模板 \n\n  # Git相关\n  - 按下Cmd + 9 打开git的日志显示窗口 \n  - Git代码比较 show diff的时候按下左上角的向下向上的箭头查看比较 \n\n  # 对特定条件的断点进行调试 \n  - 单击附着在左侧的红色端点 然后会出现对话框,点击Condition输入框中填写相关的调试的条件即可。\n\n  # SDK扩展工具 \n  - Android设备监控器 Android Device Monitor:\n## 1.分配跟踪器 \n## 2.层次查看器\n### 3.内存监视器 \n### 4.\n\n","slug":"AndroidStudio工具学习篇","published":1,"date":"2017-02-05T12:39:53.000Z","updated":"2017-02-05T15:21:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q5u0001lyjdce6j27vy","content":"<h1 id=\"选中\"><a href=\"#选中\" class=\"headerlink\" title=\"选中\"></a>选中</h1><ul>\n<li>三击改行可以选中一整行 </li>\n<li>Shift + 向上和向下箭头可以选中相邻文本 </li>\n<li><p>Cmd + , 激活设置菜单 </p>\n<h1 id=\"查找最近的文件\"><a href=\"#查找最近的文件\" class=\"headerlink\" title=\"查找最近的文件\"></a>查找最近的文件</h1></li>\n<li>使用Command + E 可以查找最近的文件 </li>\n<li>Command+ B 跳转至定义</li>\n<li><p>Cmd + N 查找类 或者按两次shift </p>\n<h1 id=\"便捷操作\"><a href=\"#便捷操作\" class=\"headerlink\" title=\"便捷操作\"></a>便捷操作</h1></li>\n<li><p>Cmd + J 打开代码模板，可以使用常用的代码模板 </p>\n<h1 id=\"Git相关\"><a href=\"#Git相关\" class=\"headerlink\" title=\"Git相关\"></a>Git相关</h1></li>\n<li>按下Cmd + 9 打开git的日志显示窗口 </li>\n<li><p>Git代码比较 show diff的时候按下左上角的向下向上的箭头查看比较 </p>\n<h1 id=\"对特定条件的断点进行调试\"><a href=\"#对特定条件的断点进行调试\" class=\"headerlink\" title=\"对特定条件的断点进行调试\"></a>对特定条件的断点进行调试</h1></li>\n<li><p>单击附着在左侧的红色端点 然后会出现对话框,点击Condition输入框中填写相关的调试的条件即可。</p>\n<h1 id=\"SDK扩展工具\"><a href=\"#SDK扩展工具\" class=\"headerlink\" title=\"SDK扩展工具\"></a>SDK扩展工具</h1></li>\n<li>Android设备监控器 Android Device Monitor:<h2 id=\"1-分配跟踪器\"><a href=\"#1-分配跟踪器\" class=\"headerlink\" title=\"1.分配跟踪器\"></a>1.分配跟踪器</h2><h2 id=\"2-层次查看器\"><a href=\"#2-层次查看器\" class=\"headerlink\" title=\"2.层次查看器\"></a>2.层次查看器</h2><h3 id=\"3-内存监视器\"><a href=\"#3-内存监视器\" class=\"headerlink\" title=\"3.内存监视器\"></a>3.内存监视器</h3><h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h3></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"选中\"><a href=\"#选中\" class=\"headerlink\" title=\"选中\"></a>选中</h1><ul>\n<li>三击改行可以选中一整行 </li>\n<li>Shift + 向上和向下箭头可以选中相邻文本 </li>\n<li><p>Cmd + , 激活设置菜单 </p>\n<h1 id=\"查找最近的文件\"><a href=\"#查找最近的文件\" class=\"headerlink\" title=\"查找最近的文件\"></a>查找最近的文件</h1></li>\n<li>使用Command + E 可以查找最近的文件 </li>\n<li>Command+ B 跳转至定义</li>\n<li><p>Cmd + N 查找类 或者按两次shift </p>\n<h1 id=\"便捷操作\"><a href=\"#便捷操作\" class=\"headerlink\" title=\"便捷操作\"></a>便捷操作</h1></li>\n<li><p>Cmd + J 打开代码模板，可以使用常用的代码模板 </p>\n<h1 id=\"Git相关\"><a href=\"#Git相关\" class=\"headerlink\" title=\"Git相关\"></a>Git相关</h1></li>\n<li>按下Cmd + 9 打开git的日志显示窗口 </li>\n<li><p>Git代码比较 show diff的时候按下左上角的向下向上的箭头查看比较 </p>\n<h1 id=\"对特定条件的断点进行调试\"><a href=\"#对特定条件的断点进行调试\" class=\"headerlink\" title=\"对特定条件的断点进行调试\"></a>对特定条件的断点进行调试</h1></li>\n<li><p>单击附着在左侧的红色端点 然后会出现对话框,点击Condition输入框中填写相关的调试的条件即可。</p>\n<h1 id=\"SDK扩展工具\"><a href=\"#SDK扩展工具\" class=\"headerlink\" title=\"SDK扩展工具\"></a>SDK扩展工具</h1></li>\n<li>Android设备监控器 Android Device Monitor:<h2 id=\"1-分配跟踪器\"><a href=\"#1-分配跟踪器\" class=\"headerlink\" title=\"1.分配跟踪器\"></a>1.分配跟踪器</h2><h2 id=\"2-层次查看器\"><a href=\"#2-层次查看器\" class=\"headerlink\" title=\"2.层次查看器\"></a>2.层次查看器</h2><h3 id=\"3-内存监视器\"><a href=\"#3-内存监视器\" class=\"headerlink\" title=\"3.内存监视器\"></a>3.内存监视器</h3><h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h3></li>\n</ul>\n"},{"title":"Android动画学习","_content":"\n1月的工作中有涉及到动画方面的知识，项目上线了，现在回顾和总结一下涉及到的动画知识和实际解决问题方面的经验。\n\n首先拿到两个小的需求：实现一个Wifi扫描效果动画和一个按钮动画。\n效果如下图所示:\n\n首先分析一下这个动画的组成：\n动画分两层:外层是一个放大的动画，内层是一个逐帧动画。外部不断的放大然后复原，内部是一个图片的轮换变化，内部的动画还包含一个渐变的过程。\n内部的逐帧动画是由若干张图片构成，可以采用SVG的方式来进行加载，放到一个xml文件中去实现 \n\n``` \n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n\n    <item\n        android:drawable=\"@drawable/wifi_1\"\n        android:duration=\"400\" />\n    <item\n        android:drawable=\"@drawable/wifi_2\"\n        android:fromAlpha = \"0.2\"\n        android:toAlpha = \"0.0\"\n        android:duration=\"400\" />\n    <item\n        android:drawable=\"@drawable/wifi_3\"\n        android:fromAlpha = \"0.2\"\n        android:toAlpha = \"0.0\"\n        android:duration=\"400\" />\n\n    <item\n        android:drawable=\"@drawable/wifi_4\"\n        android:fromAlpha = \"0.2\"\n        android:toAlpha = \"0.0\"\n        android:duration=\"400\" />\n\n</animation-list>\n```","source":"_posts/Android动画学习.md","raw":"---\ntitle: Android动画学习\n---\n\n1月的工作中有涉及到动画方面的知识，项目上线了，现在回顾和总结一下涉及到的动画知识和实际解决问题方面的经验。\n\n首先拿到两个小的需求：实现一个Wifi扫描效果动画和一个按钮动画。\n效果如下图所示:\n\n首先分析一下这个动画的组成：\n动画分两层:外层是一个放大的动画，内层是一个逐帧动画。外部不断的放大然后复原，内部是一个图片的轮换变化，内部的动画还包含一个渐变的过程。\n内部的逐帧动画是由若干张图片构成，可以采用SVG的方式来进行加载，放到一个xml文件中去实现 \n\n``` \n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:oneshot=\"false\">\n\n    <item\n        android:drawable=\"@drawable/wifi_1\"\n        android:duration=\"400\" />\n    <item\n        android:drawable=\"@drawable/wifi_2\"\n        android:fromAlpha = \"0.2\"\n        android:toAlpha = \"0.0\"\n        android:duration=\"400\" />\n    <item\n        android:drawable=\"@drawable/wifi_3\"\n        android:fromAlpha = \"0.2\"\n        android:toAlpha = \"0.0\"\n        android:duration=\"400\" />\n\n    <item\n        android:drawable=\"@drawable/wifi_4\"\n        android:fromAlpha = \"0.2\"\n        android:toAlpha = \"0.0\"\n        android:duration=\"400\" />\n\n</animation-list>\n```","slug":"Android动画学习","published":1,"date":"2017-01-29T14:43:24.000Z","updated":"2017-01-30T02:05:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q5x0002lyjdzwajn96y","content":"<p>1月的工作中有涉及到动画方面的知识，项目上线了，现在回顾和总结一下涉及到的动画知识和实际解决问题方面的经验。</p>\n<p>首先拿到两个小的需求：实现一个Wifi扫描效果动画和一个按钮动画。<br>效果如下图所示:</p>\n<p>首先分析一下这个动画的组成：<br>动画分两层:外层是一个放大的动画，内层是一个逐帧动画。外部不断的放大然后复原，内部是一个图片的轮换变化，内部的动画还包含一个渐变的过程。<br>内部的逐帧动画是由若干张图片构成，可以采用SVG的方式来进行加载，放到一个xml文件中去实现 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    android:oneshot=&quot;false&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:drawable=&quot;@drawable/wifi_1&quot;</div><div class=\"line\">        android:duration=&quot;400&quot; /&gt;</div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:drawable=&quot;@drawable/wifi_2&quot;</div><div class=\"line\">        android:fromAlpha = &quot;0.2&quot;</div><div class=\"line\">        android:toAlpha = &quot;0.0&quot;</div><div class=\"line\">        android:duration=&quot;400&quot; /&gt;</div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:drawable=&quot;@drawable/wifi_3&quot;</div><div class=\"line\">        android:fromAlpha = &quot;0.2&quot;</div><div class=\"line\">        android:toAlpha = &quot;0.0&quot;</div><div class=\"line\">        android:duration=&quot;400&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:drawable=&quot;@drawable/wifi_4&quot;</div><div class=\"line\">        android:fromAlpha = &quot;0.2&quot;</div><div class=\"line\">        android:toAlpha = &quot;0.0&quot;</div><div class=\"line\">        android:duration=&quot;400&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/animation-list&gt;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>1月的工作中有涉及到动画方面的知识，项目上线了，现在回顾和总结一下涉及到的动画知识和实际解决问题方面的经验。</p>\n<p>首先拿到两个小的需求：实现一个Wifi扫描效果动画和一个按钮动画。<br>效果如下图所示:</p>\n<p>首先分析一下这个动画的组成：<br>动画分两层:外层是一个放大的动画，内层是一个逐帧动画。外部不断的放大然后复原，内部是一个图片的轮换变化，内部的动画还包含一个渐变的过程。<br>内部的逐帧动画是由若干张图片构成，可以采用SVG的方式来进行加载，放到一个xml文件中去实现 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    android:oneshot=&quot;false&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:drawable=&quot;@drawable/wifi_1&quot;</div><div class=\"line\">        android:duration=&quot;400&quot; /&gt;</div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:drawable=&quot;@drawable/wifi_2&quot;</div><div class=\"line\">        android:fromAlpha = &quot;0.2&quot;</div><div class=\"line\">        android:toAlpha = &quot;0.0&quot;</div><div class=\"line\">        android:duration=&quot;400&quot; /&gt;</div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:drawable=&quot;@drawable/wifi_3&quot;</div><div class=\"line\">        android:fromAlpha = &quot;0.2&quot;</div><div class=\"line\">        android:toAlpha = &quot;0.0&quot;</div><div class=\"line\">        android:duration=&quot;400&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;item</div><div class=\"line\">        android:drawable=&quot;@drawable/wifi_4&quot;</div><div class=\"line\">        android:fromAlpha = &quot;0.2&quot;</div><div class=\"line\">        android:toAlpha = &quot;0.0&quot;</div><div class=\"line\">        android:duration=&quot;400&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/animation-list&gt;</div></pre></td></tr></table></figure>"},{"title":"VIM使用技巧","_content":"1.插入字符 {i a o O I A}\n{i 在光标左侧插入正文\n a 在光标右侧插入正文\n o 在光标所在行的下一行添加新行\n O 在光标所在行的上一行添加新行\n I 在光标所在行的开头插入\n A 在光标所在行的末尾插入}\n\n2.退出模式: ESC \n\n3.搜索模式: /  【使用/进行搜索】\n\n相关资料补充:使用VIM打造IDE[http://blog.csdn.net/wooin/article/details/1858917]\n\n4.跳转到文章的最后一行操作:shift+G 跳转最后一行,按下O在最后一行的下一行插入 \n\n","source":"_posts/VIM使用技巧.md","raw":"---\ntitle: VIM使用技巧\n---\n1.插入字符 {i a o O I A}\n{i 在光标左侧插入正文\n a 在光标右侧插入正文\n o 在光标所在行的下一行添加新行\n O 在光标所在行的上一行添加新行\n I 在光标所在行的开头插入\n A 在光标所在行的末尾插入}\n\n2.退出模式: ESC \n\n3.搜索模式: /  【使用/进行搜索】\n\n相关资料补充:使用VIM打造IDE[http://blog.csdn.net/wooin/article/details/1858917]\n\n4.跳转到文章的最后一行操作:shift+G 跳转最后一行,按下O在最后一行的下一行插入 \n\n","slug":"VIM使用技巧","published":1,"date":"2017-01-12T15:16:17.000Z","updated":"2017-01-15T02:46:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q5y0003lyjdqg5tp38l","content":"<p>1.插入字符 {i a o O I A}<br>{i 在光标左侧插入正文<br> a 在光标右侧插入正文<br> o 在光标所在行的下一行添加新行<br> O 在光标所在行的上一行添加新行<br> I 在光标所在行的开头插入<br> A 在光标所在行的末尾插入}</p>\n<p>2.退出模式: ESC </p>\n<p>3.搜索模式: /  【使用/进行搜索】</p>\n<p>相关资料补充:使用VIM打造IDE[<a href=\"http://blog.csdn.net/wooin/article/details/1858917\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/wooin/article/details/1858917</a>]</p>\n<p>4.跳转到文章的最后一行操作:shift+G 跳转最后一行,按下O在最后一行的下一行插入 </p>\n","excerpt":"","more":"<p>1.插入字符 {i a o O I A}<br>{i 在光标左侧插入正文<br> a 在光标右侧插入正文<br> o 在光标所在行的下一行添加新行<br> O 在光标所在行的上一行添加新行<br> I 在光标所在行的开头插入<br> A 在光标所在行的末尾插入}</p>\n<p>2.退出模式: ESC </p>\n<p>3.搜索模式: /  【使用/进行搜索】</p>\n<p>相关资料补充:使用VIM打造IDE[<a href=\"http://blog.csdn.net/wooin/article/details/1858917\">http://blog.csdn.net/wooin/article/details/1858917</a>]</p>\n<p>4.跳转到文章的最后一行操作:shift+G 跳转最后一行,按下O在最后一行的下一行插入 </p>\n"},{"title":"Hexo博客搭建常见问题","_content":"1.今天碰到了一个问题:hexo博客搭建的时候需要在:后面加一个空格[https://xuanwo.org/2014/08/14/hexo-usual-problem/\n\n2.给文章添加标题:\n---\ntitle:XXX\n---\n设置标题 \n\n注意:别忘记 title: 冒号后面有空格 \n\n3.hexo博客如何插入图片:\n使用markdown语法: \n(1) 使用本地路径：在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。 \n(2) 使用微博图床，地址http://weibotuchuang.sinaapp.com/，将图片拖入区域中，会生成图片的URL，这就是链接地址。\n\n\ntest: \n![test](/img/test.png)","source":"_posts/hexo博客搭建常见问题.md","raw":"---\ntitle: hexo博客搭建常见问题\n---\n1.今天碰到了一个问题:hexo博客搭建的时候需要在:后面加一个空格[https://xuanwo.org/2014/08/14/hexo-usual-problem/\n\n2.给文章添加标题:\n---\ntitle:XXX\n---\n设置标题 \n\n注意:别忘记 title: 冒号后面有空格 \n\n3.hexo博客如何插入图片:\n使用markdown语法: \n(1) 使用本地路径：在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。 \n(2) 使用微博图床，地址http://weibotuchuang.sinaapp.com/，将图片拖入区域中，会生成图片的URL，这就是链接地址。\n\n\ntest: \n![test](/img/test.png)","slug":"hexo博客搭建常见问题","published":1,"date":"2017-01-15T02:38:20.000Z","updated":"2017-02-28T16:01:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q5z0004lyjdhavpmirl","content":"<p>1.今天碰到了一个问题:hexo博客搭建的时候需要在:后面加一个空格[<a href=\"https://xuanwo.org/2014/08/14/hexo-usual-problem/\" target=\"_blank\" rel=\"external\">https://xuanwo.org/2014/08/14/hexo-usual-problem/</a></p>\n<h2 id=\"2-给文章添加标题\"><a href=\"#2-给文章添加标题\" class=\"headerlink\" title=\"2.给文章添加标题:\"></a>2.给文章添加标题:</h2><h2 id=\"title-XXX\"><a href=\"#title-XXX\" class=\"headerlink\" title=\"title:XXX\"></a>title:XXX</h2><p>设置标题 </p>\n<p>注意:别忘记 title: 冒号后面有空格 </p>\n<p>3.hexo博客如何插入图片:<br>使用markdown语法:<br>(1) 使用本地路径：在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。<br>(2) 使用微博图床，地址<a href=\"http://weibotuchuang.sinaapp.com/，将图片拖入区域中，会生成图片的URL，这就是链接地址。\" target=\"_blank\" rel=\"external\">http://weibotuchuang.sinaapp.com/，将图片拖入区域中，会生成图片的URL，这就是链接地址。</a></p>\n<p>test:<br><img src=\"/img/test.png\" alt=\"test\"></p>\n","excerpt":"","more":"<p>1.今天碰到了一个问题:hexo博客搭建的时候需要在:后面加一个空格[<a href=\"https://xuanwo.org/2014/08/14/hexo-usual-problem/\">https://xuanwo.org/2014/08/14/hexo-usual-problem/</a></p>\n<h2 id=\"2-给文章添加标题\"><a href=\"#2-给文章添加标题\" class=\"headerlink\" title=\"2.给文章添加标题:\"></a>2.给文章添加标题:</h2><h2 id=\"title-XXX\"><a href=\"#title-XXX\" class=\"headerlink\" title=\"title:XXX\"></a>title:XXX</h2><p>设置标题 </p>\n<p>注意:别忘记 title: 冒号后面有空格 </p>\n<p>3.hexo博客如何插入图片:<br>使用markdown语法:<br>(1) 使用本地路径：在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。<br>(2) 使用微博图床，地址<a href=\"http://weibotuchuang.sinaapp.com/，将图片拖入区域中，会生成图片的URL，这就是链接地址。\">http://weibotuchuang.sinaapp.com/，将图片拖入区域中，会生成图片的URL，这就是链接地址。</a></p>\n<p>test:<br><img src=\"/img/test.png\" alt=\"test\"></p>\n"},{"title":"React_Native环境搭建","_content":"\n\n\n","source":"_posts/React_native学习.md","raw":"---\ntitle: React_Native环境搭建 \n---\n\n\n\n","slug":"React_native学习","published":1,"date":"2017-01-04T07:08:51.000Z","updated":"2017-01-15T02:44:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q600005lyjd3pr4fxud","content":"","excerpt":"","more":""},{"_content":"\n","source":"_posts/Gradle工具学习.md","raw":"\n","slug":"Gradle工具学习","published":1,"date":"2017-01-25T13:22:24.000Z","updated":"2017-01-25T13:22:24.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q620006lyjd8iqqfkyt","content":"","excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-01-15T01:24:00.000Z","updated":"2017-01-25T13:36:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q630007lyjdam19vjxs","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"Markdown常用语法","_content":"\n由于现在公司要主导推技术分享和相关博客的整理，所以就回顾一下markdown语言 \n1. 标题的定义 # 一级标题 ## 二级标题 ### 三级标题 \n2. > 表示引用文字 \n3. 图片与链接【重点】 ![]({ImgCap}{/ImgCap})\n   链接 []() 比如插入一个图片 ![Mou icon](http://mouapp.com/Mou_128.png)\n4.表格比较麻烦 \n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\n5代码框去引用代码，使用`` 包含起来就OK \n6.使用*表示列表,例如 *[小众软件](http://baidu.com) 其实对应的HTML语法就是 <li><a href=\"www.baidu.com\">小众软件</a></li>","source":"_posts/markdown常用语法回顾.md","raw":"---\ntitle: markdown常用语法 \n---\n\n由于现在公司要主导推技术分享和相关博客的整理，所以就回顾一下markdown语言 \n1. 标题的定义 # 一级标题 ## 二级标题 ### 三级标题 \n2. > 表示引用文字 \n3. 图片与链接【重点】 ![]({ImgCap}{/ImgCap})\n   链接 []() 比如插入一个图片 ![Mou icon](http://mouapp.com/Mou_128.png)\n4.表格比较麻烦 \n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\n5代码框去引用代码，使用`` 包含起来就OK \n6.使用*表示列表,例如 *[小众软件](http://baidu.com) 其实对应的HTML语法就是 <li><a href=\"www.baidu.com\">小众软件</a></li>","slug":"markdown常用语法回顾","published":1,"date":"2017-01-04T16:15:48.000Z","updated":"2017-01-15T02:45:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q680008lyjdonv1kq99","content":"<p>由于现在公司要主导推技术分享和相关博客的整理，所以就回顾一下markdown语言 </p>\n<ol>\n<li>标题的定义 # 一级标题 ## 二级标题 ### 三级标题 </li>\n<li><blockquote>\n<p>表示引用文字 </p>\n</blockquote>\n</li>\n<li>图片与链接【重点】 <img src=\"{ImgCap}{/ImgCap}\" alt=\"\"><br>链接 <a href=\"\"></a> 比如插入一个图片 <img src=\"http://mouapp.com/Mou_128.png\" alt=\"Mou icon\"><br>4.表格比较麻烦<br>| Tables        | Are           | Cool  |<br>| ————- |:————-:| —–:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</li>\n</ol>\n<p>5代码框去引用代码，使用`` 包含起来就OK<br>6.使用<em>表示列表,例如 </em><a href=\"http://baidu.com\" target=\"_blank\" rel=\"external\">小众软件</a> 其实对应的HTML语法就是 <li><a href=\"www.baidu.com\">小众软件</a></li></p>\n","excerpt":"","more":"<p>由于现在公司要主导推技术分享和相关博客的整理，所以就回顾一下markdown语言 </p>\n<ol>\n<li>标题的定义 # 一级标题 ## 二级标题 ### 三级标题 </li>\n<li><blockquote>\n<p>表示引用文字 </p>\n</blockquote>\n</li>\n<li>图片与链接【重点】 <img src=\"{ImgCap}{/ImgCap}\" alt=\"\"><br>链接 <a href=\"\"></a> 比如插入一个图片 <img src=\"http://mouapp.com/Mou_128.png\" alt=\"Mou icon\"><br>4.表格比较麻烦<br>| Tables        | Are           | Cool  |<br>| ————- |:————-:| —–:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</li>\n</ol>\n<p>5代码框去引用代码，使用`` 包含起来就OK<br>6.使用<em>表示列表,例如 </em><a href=\"http://baidu.com\">小众软件</a> 其实对应的HTML语法就是 <li><a href=\"www.baidu.com\">小众软件</a></li></p>\n"},{"title":"使用freeline增快AndroidStudio的编译速度","_content":"现在用AndroidStudio的时候 用Gradle进行项目构建实在是太慢了，据说蚂蚁金服出了一个freeline的构建会使得项目构建速度快很多，于是今天尝试了一下。\n\n1.首先很重要的是你必须要去配置你的AndroidSDK，千万不要忘记了，今天配置SDK的时候遇到了很坑的问题。\n出现了问题：\n`mac 配置环境变量出现export `=' not a valid identifier`\n`解决方法：很简单，原来是配置SDK的时候 = 左右两边多了空格`\n2.freeline首先要进行初始化 freeline init 提示配置失败需要升级到./gradlew initFreeline\n3.`编译找不到project_description.json文件`\n`解决方法:执行 ./gradlew checkBeforeCleanBuild`\n4.`下载更新的时候一直显示0% `\n`使用命令  gradle initFreeline -Pmirror (建议直接使用这个) 加上这个参数 -Pmirror优先访问国内的镜像`\n5.第一次编译的时候全量编译\n`python freeline.py -f`\n6.调试应用的时候 使用\n`python freeline.py -d`\n7.参考资料[http://www.jianshu.com/p/46418dd38218]\n\n","source":"_posts/使用Freeline提高编译效率.md","raw":"---\ntitle: 使用freeline增快AndroidStudio的编译速度\n---\n现在用AndroidStudio的时候 用Gradle进行项目构建实在是太慢了，据说蚂蚁金服出了一个freeline的构建会使得项目构建速度快很多，于是今天尝试了一下。\n\n1.首先很重要的是你必须要去配置你的AndroidSDK，千万不要忘记了，今天配置SDK的时候遇到了很坑的问题。\n出现了问题：\n`mac 配置环境变量出现export `=' not a valid identifier`\n`解决方法：很简单，原来是配置SDK的时候 = 左右两边多了空格`\n2.freeline首先要进行初始化 freeline init 提示配置失败需要升级到./gradlew initFreeline\n3.`编译找不到project_description.json文件`\n`解决方法:执行 ./gradlew checkBeforeCleanBuild`\n4.`下载更新的时候一直显示0% `\n`使用命令  gradle initFreeline -Pmirror (建议直接使用这个) 加上这个参数 -Pmirror优先访问国内的镜像`\n5.第一次编译的时候全量编译\n`python freeline.py -f`\n6.调试应用的时候 使用\n`python freeline.py -d`\n7.参考资料[http://www.jianshu.com/p/46418dd38218]\n\n","slug":"使用Freeline提高编译效率","published":1,"date":"2017-01-07T14:35:06.000Z","updated":"2017-01-15T02:43:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q690009lyjdgpk8ida4","content":"<p>现在用AndroidStudio的时候 用Gradle进行项目构建实在是太慢了，据说蚂蚁金服出了一个freeline的构建会使得项目构建速度快很多，于是今天尝试了一下。</p>\n<p>1.首先很重要的是你必须要去配置你的AndroidSDK，千万不要忘记了，今天配置SDK的时候遇到了很坑的问题。<br>出现了问题：<br><code>mac 配置环境变量出现export</code>=’ not a valid identifier<code>`解决方法：很简单，原来是配置SDK的时候 = 左右两边多了空格</code><br>2.freeline首先要进行初始化 freeline init 提示配置失败需要升级到./gradlew initFreeline<br>3.<code>编译找不到project_description.json文件</code><br><code>解决方法:执行 ./gradlew checkBeforeCleanBuild</code><br>4.<code>下载更新的时候一直显示0%</code><br><code>使用命令  gradle initFreeline -Pmirror (建议直接使用这个) 加上这个参数 -Pmirror优先访问国内的镜像</code><br>5.第一次编译的时候全量编译<br><code>python freeline.py -f</code><br>6.调试应用的时候 使用<br><code>python freeline.py -d</code><br>7.参考资料[<a href=\"http://www.jianshu.com/p/46418dd38218\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/46418dd38218</a>]</p>\n","excerpt":"","more":"<p>现在用AndroidStudio的时候 用Gradle进行项目构建实在是太慢了，据说蚂蚁金服出了一个freeline的构建会使得项目构建速度快很多，于是今天尝试了一下。</p>\n<p>1.首先很重要的是你必须要去配置你的AndroidSDK，千万不要忘记了，今天配置SDK的时候遇到了很坑的问题。<br>出现了问题：<br><code>mac 配置环境变量出现export</code>=’ not a valid identifier<code>`解决方法：很简单，原来是配置SDK的时候 = 左右两边多了空格</code><br>2.freeline首先要进行初始化 freeline init 提示配置失败需要升级到./gradlew initFreeline<br>3.<code>编译找不到project_description.json文件</code><br><code>解决方法:执行 ./gradlew checkBeforeCleanBuild</code><br>4.<code>下载更新的时候一直显示0%</code><br><code>使用命令  gradle initFreeline -Pmirror (建议直接使用这个) 加上这个参数 -Pmirror优先访问国内的镜像</code><br>5.第一次编译的时候全量编译<br><code>python freeline.py -f</code><br>6.调试应用的时候 使用<br><code>python freeline.py -d</code><br>7.参考资料[<a href=\"http://www.jianshu.com/p/46418dd38218\">http://www.jianshu.com/p/46418dd38218</a>]</p>\n"},{"title":"关于项目中时间分配的问题","_content":"\n  今天我体验了一把关于项目中时间分配的问题。整个项目的需求其实还是很满的，而且时间很紧张，在时间紧任务重的时候，任务的优先级和合理的分配就显得尤为重要了。\n比如这次春节一回来，就要开始改版了，改版的内容其实还挺多的，主题风格的样式修改，做成可配置的模式,\n界面的样式各种文字的修改，智能场景整个逻辑修改外界集成界面动画。周四确定下来整个任务需求，周五还在探讨需求中的不合理部分，\n下周三就要提测，也就是说完整的开发时间就4天，包括中间还有部分知识和业务逻辑不清晰，也许会花去1天的时间学习。总的来说，开发时间就3天。\n\n  那么，任务重，外加时间紧的时候，什么是最重要的？保持自己稳定的情绪，碰到事情不要慌，当任务重的时候，时时刻刻感觉来不及，会有焦躁的情绪，情绪稳定好这是必然。\n2.要学会沟通，要学会拒绝，我在项目执行中就碰到，自己很难做人。项目负责人的意思是你要把整个需求确定下来沟通好，产品这边说UI没有设计完整，UI又把产品的逻辑推给了产品。\n这个时候作为开发人员，被挤在中间很难受。当然有问题的地方一定是有机会的地方，记住.\n\n 首先，要分清楚UI开发过程中，哪些属于UI的逻辑和交互，哪些属于UI的细节。交互和逻辑方面就应该和产品沟通，UI细节方面就应该和UI去沟通。\n当然沟通过程中肯定会碰到很多的问题。比如说：实现困难，这个时候应该去做需求评估，找解决方案，要和同事交流自己解决问题的想法和思路，因为这些细节点没有做到位，可能会delay 2天哦，千万别小看细节，细节不注意，2天时间过去了，你剩下的时间是100%来不及的。当然细节确定了以后，要赶紧去实现，写DEMO，DEMO出来了未必就代表集成没有任何问题。\nDEMO我也写好了，发现1天过去了，剩下的时间我就只有2天多点了。如何分配好2天多的时间，首先：业务逻辑是最重要的，理清逻辑比UI实现来的更加重要，这部分的时间应该花下去，UI细节可以微调，微调需要花很长的时间，而且要涉及到和UI同事的合作，合作中不断的微调既耽误时间，又没有明显效果，而且别人也不一定有空，在最后第二天的时候，抽2小时找时间一起沟通，一起联调。优先级应该往下降。\n当然，最后再剩下测试的时间估进去，你也要花1/4天。所以主流程走通是1天半。时间很紧，前期最重要的是理清逻辑，逻辑理不清楚越来越乱，外加慌乱的情绪只会无限制delay.一定要相信前期投入对正确的时间，后期才会事半功倍。最后才能达到封包的稳定性和质量。\n\n整个页面可能分三大板块：首页的Title，这部分最简单，中间的列表，此次修改也是涉及到样式。难点是样式可配置。但是也要分，这个版本可以写的不那么完美。\n在时间紧的时候可以挪到第二优先级。第三：场景的业务逻辑修改外加UI动画：重点中的重点：前两块时间可以压缩，最后一块必须要分：业务逻辑流程，当你画出整个流程图，\n说明你已经弄懂了。UI的动画，这块可以先写DEMO，集成时候将逻辑和DEMO一并集成，可以花一些时间微调。再和UI同事确认相关的效果。这一块需要花1天时间。\n当然，所有的需求拟定和任务确定其实都是在上班以外的时间整理的，周六周日你任务应该是已经建立好思维导图了，TODOList列表应该很清楚了，周一要看到行动了，这样才能在工作中游刃有余，当然刚刚评估中还有半天，那应该留下来应对突发状况，谁也不知道哪天需求改了，当然前提的前提，你在做调研的时候，应该把整体的大方向确定完毕了，不应该在执行的时候大需求还没明白清楚，这样是大忌。\n\n我觉得有一点：不要害怕问问题，要敢于问，当然不是不经过大脑的问题，该拒绝的拒绝，你要让别人知道自己是一个聪明的开发者，而不是碰到问题不思考到处BIBI，错了没关系，要及时改进。\n\n整个过程执行下来有两点感悟还是挺深的:\n1.在执行过程中，前期还没有UI需求的时候，先搞清楚业务逻辑，可以看一下整个代码。不熟悉的时候可以打断点，理清整个逻辑，理解的越到位，对后期的进度越有利。\n2.在UI的开发中浪费了太多时间：1.Sketch工具不熟练。2.后期和UI的微调花了太多时间，将近有1.5天。第一:是对整个UI测量工具的不熟悉。第二:前期没有和UI约定好，大家抽取一个都有空的时间，\n一起联调，会省下太多的时间，原先1.5天可能只需要半天就搞定了。那这个时候可以留下更多的时间处理紧急问题。前期UI还未设计出来的时候，就应该对整个APP有自己的理解。这样沟通起来也会顺畅很多。\n\n第一点我做的还算到位，所以发现：涉及到逻辑的整合比较顺利，第二点还做的不够。","source":"_posts/关于项目中时间分配的问题.md","raw":"---\ntitle: 关于项目中时间分配的问题\n---\n\n  今天我体验了一把关于项目中时间分配的问题。整个项目的需求其实还是很满的，而且时间很紧张，在时间紧任务重的时候，任务的优先级和合理的分配就显得尤为重要了。\n比如这次春节一回来，就要开始改版了，改版的内容其实还挺多的，主题风格的样式修改，做成可配置的模式,\n界面的样式各种文字的修改，智能场景整个逻辑修改外界集成界面动画。周四确定下来整个任务需求，周五还在探讨需求中的不合理部分，\n下周三就要提测，也就是说完整的开发时间就4天，包括中间还有部分知识和业务逻辑不清晰，也许会花去1天的时间学习。总的来说，开发时间就3天。\n\n  那么，任务重，外加时间紧的时候，什么是最重要的？保持自己稳定的情绪，碰到事情不要慌，当任务重的时候，时时刻刻感觉来不及，会有焦躁的情绪，情绪稳定好这是必然。\n2.要学会沟通，要学会拒绝，我在项目执行中就碰到，自己很难做人。项目负责人的意思是你要把整个需求确定下来沟通好，产品这边说UI没有设计完整，UI又把产品的逻辑推给了产品。\n这个时候作为开发人员，被挤在中间很难受。当然有问题的地方一定是有机会的地方，记住.\n\n 首先，要分清楚UI开发过程中，哪些属于UI的逻辑和交互，哪些属于UI的细节。交互和逻辑方面就应该和产品沟通，UI细节方面就应该和UI去沟通。\n当然沟通过程中肯定会碰到很多的问题。比如说：实现困难，这个时候应该去做需求评估，找解决方案，要和同事交流自己解决问题的想法和思路，因为这些细节点没有做到位，可能会delay 2天哦，千万别小看细节，细节不注意，2天时间过去了，你剩下的时间是100%来不及的。当然细节确定了以后，要赶紧去实现，写DEMO，DEMO出来了未必就代表集成没有任何问题。\nDEMO我也写好了，发现1天过去了，剩下的时间我就只有2天多点了。如何分配好2天多的时间，首先：业务逻辑是最重要的，理清逻辑比UI实现来的更加重要，这部分的时间应该花下去，UI细节可以微调，微调需要花很长的时间，而且要涉及到和UI同事的合作，合作中不断的微调既耽误时间，又没有明显效果，而且别人也不一定有空，在最后第二天的时候，抽2小时找时间一起沟通，一起联调。优先级应该往下降。\n当然，最后再剩下测试的时间估进去，你也要花1/4天。所以主流程走通是1天半。时间很紧，前期最重要的是理清逻辑，逻辑理不清楚越来越乱，外加慌乱的情绪只会无限制delay.一定要相信前期投入对正确的时间，后期才会事半功倍。最后才能达到封包的稳定性和质量。\n\n整个页面可能分三大板块：首页的Title，这部分最简单，中间的列表，此次修改也是涉及到样式。难点是样式可配置。但是也要分，这个版本可以写的不那么完美。\n在时间紧的时候可以挪到第二优先级。第三：场景的业务逻辑修改外加UI动画：重点中的重点：前两块时间可以压缩，最后一块必须要分：业务逻辑流程，当你画出整个流程图，\n说明你已经弄懂了。UI的动画，这块可以先写DEMO，集成时候将逻辑和DEMO一并集成，可以花一些时间微调。再和UI同事确认相关的效果。这一块需要花1天时间。\n当然，所有的需求拟定和任务确定其实都是在上班以外的时间整理的，周六周日你任务应该是已经建立好思维导图了，TODOList列表应该很清楚了，周一要看到行动了，这样才能在工作中游刃有余，当然刚刚评估中还有半天，那应该留下来应对突发状况，谁也不知道哪天需求改了，当然前提的前提，你在做调研的时候，应该把整体的大方向确定完毕了，不应该在执行的时候大需求还没明白清楚，这样是大忌。\n\n我觉得有一点：不要害怕问问题，要敢于问，当然不是不经过大脑的问题，该拒绝的拒绝，你要让别人知道自己是一个聪明的开发者，而不是碰到问题不思考到处BIBI，错了没关系，要及时改进。\n\n整个过程执行下来有两点感悟还是挺深的:\n1.在执行过程中，前期还没有UI需求的时候，先搞清楚业务逻辑，可以看一下整个代码。不熟悉的时候可以打断点，理清整个逻辑，理解的越到位，对后期的进度越有利。\n2.在UI的开发中浪费了太多时间：1.Sketch工具不熟练。2.后期和UI的微调花了太多时间，将近有1.5天。第一:是对整个UI测量工具的不熟悉。第二:前期没有和UI约定好，大家抽取一个都有空的时间，\n一起联调，会省下太多的时间，原先1.5天可能只需要半天就搞定了。那这个时候可以留下更多的时间处理紧急问题。前期UI还未设计出来的时候，就应该对整个APP有自己的理解。这样沟通起来也会顺畅很多。\n\n第一点我做的还算到位，所以发现：涉及到逻辑的整合比较顺利，第二点还做的不够。","slug":"关于项目中时间分配的问题","published":1,"date":"2017-02-12T15:37:05.000Z","updated":"2017-02-27T12:33:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q69000alyjdks5oiun2","content":"<p>  今天我体验了一把关于项目中时间分配的问题。整个项目的需求其实还是很满的，而且时间很紧张，在时间紧任务重的时候，任务的优先级和合理的分配就显得尤为重要了。<br>比如这次春节一回来，就要开始改版了，改版的内容其实还挺多的，主题风格的样式修改，做成可配置的模式,<br>界面的样式各种文字的修改，智能场景整个逻辑修改外界集成界面动画。周四确定下来整个任务需求，周五还在探讨需求中的不合理部分，<br>下周三就要提测，也就是说完整的开发时间就4天，包括中间还有部分知识和业务逻辑不清晰，也许会花去1天的时间学习。总的来说，开发时间就3天。</p>\n<p>  那么，任务重，外加时间紧的时候，什么是最重要的？保持自己稳定的情绪，碰到事情不要慌，当任务重的时候，时时刻刻感觉来不及，会有焦躁的情绪，情绪稳定好这是必然。<br>2.要学会沟通，要学会拒绝，我在项目执行中就碰到，自己很难做人。项目负责人的意思是你要把整个需求确定下来沟通好，产品这边说UI没有设计完整，UI又把产品的逻辑推给了产品。<br>这个时候作为开发人员，被挤在中间很难受。当然有问题的地方一定是有机会的地方，记住.</p>\n<p> 首先，要分清楚UI开发过程中，哪些属于UI的逻辑和交互，哪些属于UI的细节。交互和逻辑方面就应该和产品沟通，UI细节方面就应该和UI去沟通。<br>当然沟通过程中肯定会碰到很多的问题。比如说：实现困难，这个时候应该去做需求评估，找解决方案，要和同事交流自己解决问题的想法和思路，因为这些细节点没有做到位，可能会delay 2天哦，千万别小看细节，细节不注意，2天时间过去了，你剩下的时间是100%来不及的。当然细节确定了以后，要赶紧去实现，写DEMO，DEMO出来了未必就代表集成没有任何问题。<br>DEMO我也写好了，发现1天过去了，剩下的时间我就只有2天多点了。如何分配好2天多的时间，首先：业务逻辑是最重要的，理清逻辑比UI实现来的更加重要，这部分的时间应该花下去，UI细节可以微调，微调需要花很长的时间，而且要涉及到和UI同事的合作，合作中不断的微调既耽误时间，又没有明显效果，而且别人也不一定有空，在最后第二天的时候，抽2小时找时间一起沟通，一起联调。优先级应该往下降。<br>当然，最后再剩下测试的时间估进去，你也要花1/4天。所以主流程走通是1天半。时间很紧，前期最重要的是理清逻辑，逻辑理不清楚越来越乱，外加慌乱的情绪只会无限制delay.一定要相信前期投入对正确的时间，后期才会事半功倍。最后才能达到封包的稳定性和质量。</p>\n<p>整个页面可能分三大板块：首页的Title，这部分最简单，中间的列表，此次修改也是涉及到样式。难点是样式可配置。但是也要分，这个版本可以写的不那么完美。<br>在时间紧的时候可以挪到第二优先级。第三：场景的业务逻辑修改外加UI动画：重点中的重点：前两块时间可以压缩，最后一块必须要分：业务逻辑流程，当你画出整个流程图，<br>说明你已经弄懂了。UI的动画，这块可以先写DEMO，集成时候将逻辑和DEMO一并集成，可以花一些时间微调。再和UI同事确认相关的效果。这一块需要花1天时间。<br>当然，所有的需求拟定和任务确定其实都是在上班以外的时间整理的，周六周日你任务应该是已经建立好思维导图了，TODOList列表应该很清楚了，周一要看到行动了，这样才能在工作中游刃有余，当然刚刚评估中还有半天，那应该留下来应对突发状况，谁也不知道哪天需求改了，当然前提的前提，你在做调研的时候，应该把整体的大方向确定完毕了，不应该在执行的时候大需求还没明白清楚，这样是大忌。</p>\n<p>我觉得有一点：不要害怕问问题，要敢于问，当然不是不经过大脑的问题，该拒绝的拒绝，你要让别人知道自己是一个聪明的开发者，而不是碰到问题不思考到处BIBI，错了没关系，要及时改进。</p>\n<p>整个过程执行下来有两点感悟还是挺深的:<br>1.在执行过程中，前期还没有UI需求的时候，先搞清楚业务逻辑，可以看一下整个代码。不熟悉的时候可以打断点，理清整个逻辑，理解的越到位，对后期的进度越有利。<br>2.在UI的开发中浪费了太多时间：1.Sketch工具不熟练。2.后期和UI的微调花了太多时间，将近有1.5天。第一:是对整个UI测量工具的不熟悉。第二:前期没有和UI约定好，大家抽取一个都有空的时间，<br>一起联调，会省下太多的时间，原先1.5天可能只需要半天就搞定了。那这个时候可以留下更多的时间处理紧急问题。前期UI还未设计出来的时候，就应该对整个APP有自己的理解。这样沟通起来也会顺畅很多。</p>\n<p>第一点我做的还算到位，所以发现：涉及到逻辑的整合比较顺利，第二点还做的不够。</p>\n","excerpt":"","more":"<p>  今天我体验了一把关于项目中时间分配的问题。整个项目的需求其实还是很满的，而且时间很紧张，在时间紧任务重的时候，任务的优先级和合理的分配就显得尤为重要了。<br>比如这次春节一回来，就要开始改版了，改版的内容其实还挺多的，主题风格的样式修改，做成可配置的模式,<br>界面的样式各种文字的修改，智能场景整个逻辑修改外界集成界面动画。周四确定下来整个任务需求，周五还在探讨需求中的不合理部分，<br>下周三就要提测，也就是说完整的开发时间就4天，包括中间还有部分知识和业务逻辑不清晰，也许会花去1天的时间学习。总的来说，开发时间就3天。</p>\n<p>  那么，任务重，外加时间紧的时候，什么是最重要的？保持自己稳定的情绪，碰到事情不要慌，当任务重的时候，时时刻刻感觉来不及，会有焦躁的情绪，情绪稳定好这是必然。<br>2.要学会沟通，要学会拒绝，我在项目执行中就碰到，自己很难做人。项目负责人的意思是你要把整个需求确定下来沟通好，产品这边说UI没有设计完整，UI又把产品的逻辑推给了产品。<br>这个时候作为开发人员，被挤在中间很难受。当然有问题的地方一定是有机会的地方，记住.</p>\n<p> 首先，要分清楚UI开发过程中，哪些属于UI的逻辑和交互，哪些属于UI的细节。交互和逻辑方面就应该和产品沟通，UI细节方面就应该和UI去沟通。<br>当然沟通过程中肯定会碰到很多的问题。比如说：实现困难，这个时候应该去做需求评估，找解决方案，要和同事交流自己解决问题的想法和思路，因为这些细节点没有做到位，可能会delay 2天哦，千万别小看细节，细节不注意，2天时间过去了，你剩下的时间是100%来不及的。当然细节确定了以后，要赶紧去实现，写DEMO，DEMO出来了未必就代表集成没有任何问题。<br>DEMO我也写好了，发现1天过去了，剩下的时间我就只有2天多点了。如何分配好2天多的时间，首先：业务逻辑是最重要的，理清逻辑比UI实现来的更加重要，这部分的时间应该花下去，UI细节可以微调，微调需要花很长的时间，而且要涉及到和UI同事的合作，合作中不断的微调既耽误时间，又没有明显效果，而且别人也不一定有空，在最后第二天的时候，抽2小时找时间一起沟通，一起联调。优先级应该往下降。<br>当然，最后再剩下测试的时间估进去，你也要花1/4天。所以主流程走通是1天半。时间很紧，前期最重要的是理清逻辑，逻辑理不清楚越来越乱，外加慌乱的情绪只会无限制delay.一定要相信前期投入对正确的时间，后期才会事半功倍。最后才能达到封包的稳定性和质量。</p>\n<p>整个页面可能分三大板块：首页的Title，这部分最简单，中间的列表，此次修改也是涉及到样式。难点是样式可配置。但是也要分，这个版本可以写的不那么完美。<br>在时间紧的时候可以挪到第二优先级。第三：场景的业务逻辑修改外加UI动画：重点中的重点：前两块时间可以压缩，最后一块必须要分：业务逻辑流程，当你画出整个流程图，<br>说明你已经弄懂了。UI的动画，这块可以先写DEMO，集成时候将逻辑和DEMO一并集成，可以花一些时间微调。再和UI同事确认相关的效果。这一块需要花1天时间。<br>当然，所有的需求拟定和任务确定其实都是在上班以外的时间整理的，周六周日你任务应该是已经建立好思维导图了，TODOList列表应该很清楚了，周一要看到行动了，这样才能在工作中游刃有余，当然刚刚评估中还有半天，那应该留下来应对突发状况，谁也不知道哪天需求改了，当然前提的前提，你在做调研的时候，应该把整体的大方向确定完毕了，不应该在执行的时候大需求还没明白清楚，这样是大忌。</p>\n<p>我觉得有一点：不要害怕问问题，要敢于问，当然不是不经过大脑的问题，该拒绝的拒绝，你要让别人知道自己是一个聪明的开发者，而不是碰到问题不思考到处BIBI，错了没关系，要及时改进。</p>\n<p>整个过程执行下来有两点感悟还是挺深的:<br>1.在执行过程中，前期还没有UI需求的时候，先搞清楚业务逻辑，可以看一下整个代码。不熟悉的时候可以打断点，理清整个逻辑，理解的越到位，对后期的进度越有利。<br>2.在UI的开发中浪费了太多时间：1.Sketch工具不熟练。2.后期和UI的微调花了太多时间，将近有1.5天。第一:是对整个UI测量工具的不熟悉。第二:前期没有和UI约定好，大家抽取一个都有空的时间，<br>一起联调，会省下太多的时间，原先1.5天可能只需要半天就搞定了。那这个时候可以留下更多的时间处理紧急问题。前期UI还未设计出来的时候，就应该对整个APP有自己的理解。这样沟通起来也会顺畅很多。</p>\n<p>第一点我做的还算到位，所以发现：涉及到逻辑的整合比较顺利，第二点还做的不够。</p>\n"},{"title":"代码规范","_content":"同事在项目中指出了很多代码规范的问题，很值得引起重视:\n\n有些逻辑是业务模块的话，不要写在公共的utils里面，另外变量命名也要规范起来，不要随意命名。1、全局变量首字母已m开头，数据bean除外。\n2、静态变量全部大写已S开头，单词间采用下划线分隔。\n3、局部变量首字母小写。\n4、全局变量和局部变量变量采用驼峰法，尽量简洁功能明确。\n\n","source":"_posts/代码规范.md","raw":"---\ntitle: 代码规范\n---\n同事在项目中指出了很多代码规范的问题，很值得引起重视:\n\n有些逻辑是业务模块的话，不要写在公共的utils里面，另外变量命名也要规范起来，不要随意命名。1、全局变量首字母已m开头，数据bean除外。\n2、静态变量全部大写已S开头，单词间采用下划线分隔。\n3、局部变量首字母小写。\n4、全局变量和局部变量变量采用驼峰法，尽量简洁功能明确。\n\n","slug":"代码规范","published":1,"date":"2017-01-14T15:49:52.000Z","updated":"2017-01-15T02:35:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q6a000blyjdpjzblwom","content":"<p>同事在项目中指出了很多代码规范的问题，很值得引起重视:</p>\n<p>有些逻辑是业务模块的话，不要写在公共的utils里面，另外变量命名也要规范起来，不要随意命名。1、全局变量首字母已m开头，数据bean除外。<br>2、静态变量全部大写已S开头，单词间采用下划线分隔。<br>3、局部变量首字母小写。<br>4、全局变量和局部变量变量采用驼峰法，尽量简洁功能明确。</p>\n","excerpt":"","more":"<p>同事在项目中指出了很多代码规范的问题，很值得引起重视:</p>\n<p>有些逻辑是业务模块的话，不要写在公共的utils里面，另外变量命名也要规范起来，不要随意命名。1、全局变量首字母已m开头，数据bean除外。<br>2、静态变量全部大写已S开头，单词间采用下划线分隔。<br>3、局部变量首字母小写。<br>4、全局变量和局部变量变量采用驼峰法，尽量简洁功能明确。</p>\n"},{"title":"开发中的小习惯","_content":"开发中养成一些小的习惯可以节省很多的时间 \n1.比如我们在发送代码文件的时候，把build文件删除掉再发给别人，这样可以使得安装包边的很小 很容易传输 而且不会造成编中不兼容的问题\n\n2.\n","source":"_posts/开发中生活中的小习惯.md","raw":"---\ntitle: 开发中的小习惯\n---\n开发中养成一些小的习惯可以节省很多的时间 \n1.比如我们在发送代码文件的时候，把build文件删除掉再发给别人，这样可以使得安装包边的很小 很容易传输 而且不会造成编中不兼容的问题\n\n2.\n","slug":"开发中生活中的小习惯","published":1,"date":"2017-01-04T16:19:50.000Z","updated":"2017-01-15T02:42:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q6b000clyjdtop5vlrb","content":"<p>开发中养成一些小的习惯可以节省很多的时间<br>1.比如我们在发送代码文件的时候，把build文件删除掉再发给别人，这样可以使得安装包边的很小 很容易传输 而且不会造成编中不兼容的问题</p>\n<p>2.</p>\n","excerpt":"","more":"<p>开发中养成一些小的习惯可以节省很多的时间<br>1.比如我们在发送代码文件的时候，把build文件删除掉再发给别人，这样可以使得安装包边的很小 很容易传输 而且不会造成编中不兼容的问题</p>\n<p>2.</p>\n"},{"title":"国外推送方案的调研","_content":" \n 解决的问题:国外推送无法推送到指定的手机\n 问题的原因:由于在国内GFW原因,国内网络推送无法到达。目前采用的Umeng推送方案存在到达率问题。\n\n 对现有主流的推送方案进行评估:\n (一)友盟推送:\n (1)原理:\n Umeng的推送机制是采用独立进程运行，兄弟App共享长连接方式。【手机中采用Umeng推送的APP可以共享Service】收取推送。\n\n (2)存在的问题:\n 1.国外用户收不到推送:实际查看Umeng后台分析，发现国外用户推送到达率不高。可能由于Umeng服务器未覆盖到一些国家和相应的地区引起的原因。\n 2.相关的测试结果来看，部分手机由于系统问题导致Service存活率情况不高。\n 3.在service被杀死后有一定概率丢失消息,有一定延时率。\n\n (二)小米推送:\n 之前在确定需求时，有提出第三世界的国家，例如:印度，他可能购买了中国的手机比如小米手机，还有一个情况：国产手机在国外使用的情况【Umeng解决】\n (1)原理:采用系统长连接方式推送。只要系统不死，可以保证90%的推送到达率,原生和MIUI系统上有良好的存活率。\n (2)此方案使用时候，需要看小米用户的数量来决定是否采用。\n\n (三)Google原生服务GCM【现已升级为FCM】\n (1)原理:App服务器向GCM连接服务器发送HTTP/XMPP请求，GCM存储相关推送信息，并通过一个Token作为表示，并向注册了GCM服务的客户端推送特定消息。\n (2)存在问题：FCM服务必须是在安装了googleplayServer才能正常运行。\n\n 综上分析:采用Umeng和Google FCM作为方案。针对国外的渠道，采用FCM推送，国内的渠道，采用Umeng推送。\n\n 有一个基于FCM的方案OneSignal[https://documentation.onesignal.com] 他提供了一个管理后台，对APP对达到率,推送的延迟率，用户量等的数据统计服务。\n 根据实际需求:后台单独会做相关的数据统计，所以不考虑此方案。\n 需要思考的几个问题:\n 1.FCM是否可以进行群推【查看相应的API】\n 2.需要对推送的方案进行单独模块划分并配置\n 3.客户端原先旧版升级到新版推送方案切换的问题。\n\n\n 客户端需要评估方案的集成：\n 1.将推送部分分模块进行集成:其中涉及到，各个不同的模块对进行推送相关操作时候，需要添加相关的权限。单独在AndroidManifest.xml中配置会导致权限混乱。\n  添加相关的权限时候，指定渠道名称，通过代码动态写入的方式。\n 2.当然采用两种推送方案的时候，需要写一个管理类PushManager对推送方案进行判断:国外的手机并且安装了google play server的手机采用FCM的推送方式 \n\n\n\n \n\n\n\n\n\n\n","source":"_posts/国外推送方案调研.md","raw":"---\ntitle: 国外推送方案的调研\n---\n \n 解决的问题:国外推送无法推送到指定的手机\n 问题的原因:由于在国内GFW原因,国内网络推送无法到达。目前采用的Umeng推送方案存在到达率问题。\n\n 对现有主流的推送方案进行评估:\n (一)友盟推送:\n (1)原理:\n Umeng的推送机制是采用独立进程运行，兄弟App共享长连接方式。【手机中采用Umeng推送的APP可以共享Service】收取推送。\n\n (2)存在的问题:\n 1.国外用户收不到推送:实际查看Umeng后台分析，发现国外用户推送到达率不高。可能由于Umeng服务器未覆盖到一些国家和相应的地区引起的原因。\n 2.相关的测试结果来看，部分手机由于系统问题导致Service存活率情况不高。\n 3.在service被杀死后有一定概率丢失消息,有一定延时率。\n\n (二)小米推送:\n 之前在确定需求时，有提出第三世界的国家，例如:印度，他可能购买了中国的手机比如小米手机，还有一个情况：国产手机在国外使用的情况【Umeng解决】\n (1)原理:采用系统长连接方式推送。只要系统不死，可以保证90%的推送到达率,原生和MIUI系统上有良好的存活率。\n (2)此方案使用时候，需要看小米用户的数量来决定是否采用。\n\n (三)Google原生服务GCM【现已升级为FCM】\n (1)原理:App服务器向GCM连接服务器发送HTTP/XMPP请求，GCM存储相关推送信息，并通过一个Token作为表示，并向注册了GCM服务的客户端推送特定消息。\n (2)存在问题：FCM服务必须是在安装了googleplayServer才能正常运行。\n\n 综上分析:采用Umeng和Google FCM作为方案。针对国外的渠道，采用FCM推送，国内的渠道，采用Umeng推送。\n\n 有一个基于FCM的方案OneSignal[https://documentation.onesignal.com] 他提供了一个管理后台，对APP对达到率,推送的延迟率，用户量等的数据统计服务。\n 根据实际需求:后台单独会做相关的数据统计，所以不考虑此方案。\n 需要思考的几个问题:\n 1.FCM是否可以进行群推【查看相应的API】\n 2.需要对推送的方案进行单独模块划分并配置\n 3.客户端原先旧版升级到新版推送方案切换的问题。\n\n\n 客户端需要评估方案的集成：\n 1.将推送部分分模块进行集成:其中涉及到，各个不同的模块对进行推送相关操作时候，需要添加相关的权限。单独在AndroidManifest.xml中配置会导致权限混乱。\n  添加相关的权限时候，指定渠道名称，通过代码动态写入的方式。\n 2.当然采用两种推送方案的时候，需要写一个管理类PushManager对推送方案进行判断:国外的手机并且安装了google play server的手机采用FCM的推送方式 \n\n\n\n \n\n\n\n\n\n\n","slug":"国外推送方案调研","published":1,"date":"2017-02-27T05:56:41.000Z","updated":"2017-02-27T15:22:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q6d000dlyjd8upctwpu","content":"<p> 解决的问题:国外推送无法推送到指定的手机<br> 问题的原因:由于在国内GFW原因,国内网络推送无法到达。目前采用的Umeng推送方案存在到达率问题。</p>\n<p> 对现有主流的推送方案进行评估:<br> (一)友盟推送:<br> (1)原理:<br> Umeng的推送机制是采用独立进程运行，兄弟App共享长连接方式。【手机中采用Umeng推送的APP可以共享Service】收取推送。</p>\n<p> (2)存在的问题:<br> 1.国外用户收不到推送:实际查看Umeng后台分析，发现国外用户推送到达率不高。可能由于Umeng服务器未覆盖到一些国家和相应的地区引起的原因。<br> 2.相关的测试结果来看，部分手机由于系统问题导致Service存活率情况不高。<br> 3.在service被杀死后有一定概率丢失消息,有一定延时率。</p>\n<p> (二)小米推送:<br> 之前在确定需求时，有提出第三世界的国家，例如:印度，他可能购买了中国的手机比如小米手机，还有一个情况：国产手机在国外使用的情况【Umeng解决】<br> (1)原理:采用系统长连接方式推送。只要系统不死，可以保证90%的推送到达率,原生和MIUI系统上有良好的存活率。<br> (2)此方案使用时候，需要看小米用户的数量来决定是否采用。</p>\n<p> (三)Google原生服务GCM【现已升级为FCM】<br> (1)原理:App服务器向GCM连接服务器发送HTTP/XMPP请求，GCM存储相关推送信息，并通过一个Token作为表示，并向注册了GCM服务的客户端推送特定消息。<br> (2)存在问题：FCM服务必须是在安装了googleplayServer才能正常运行。</p>\n<p> 综上分析:采用Umeng和Google FCM作为方案。针对国外的渠道，采用FCM推送，国内的渠道，采用Umeng推送。</p>\n<p> 有一个基于FCM的方案OneSignal[<a href=\"https://documentation.onesignal.com\" target=\"_blank\" rel=\"external\">https://documentation.onesignal.com</a>] 他提供了一个管理后台，对APP对达到率,推送的延迟率，用户量等的数据统计服务。<br> 根据实际需求:后台单独会做相关的数据统计，所以不考虑此方案。<br> 需要思考的几个问题:<br> 1.FCM是否可以进行群推【查看相应的API】<br> 2.需要对推送的方案进行单独模块划分并配置<br> 3.客户端原先旧版升级到新版推送方案切换的问题。</p>\n<p> 客户端需要评估方案的集成：<br> 1.将推送部分分模块进行集成:其中涉及到，各个不同的模块对进行推送相关操作时候，需要添加相关的权限。单独在AndroidManifest.xml中配置会导致权限混乱。<br>  添加相关的权限时候，指定渠道名称，通过代码动态写入的方式。<br> 2.当然采用两种推送方案的时候，需要写一个管理类PushManager对推送方案进行判断:国外的手机并且安装了google play server的手机采用FCM的推送方式 </p>\n","excerpt":"","more":"<p> 解决的问题:国外推送无法推送到指定的手机<br> 问题的原因:由于在国内GFW原因,国内网络推送无法到达。目前采用的Umeng推送方案存在到达率问题。</p>\n<p> 对现有主流的推送方案进行评估:<br> (一)友盟推送:<br> (1)原理:<br> Umeng的推送机制是采用独立进程运行，兄弟App共享长连接方式。【手机中采用Umeng推送的APP可以共享Service】收取推送。</p>\n<p> (2)存在的问题:<br> 1.国外用户收不到推送:实际查看Umeng后台分析，发现国外用户推送到达率不高。可能由于Umeng服务器未覆盖到一些国家和相应的地区引起的原因。<br> 2.相关的测试结果来看，部分手机由于系统问题导致Service存活率情况不高。<br> 3.在service被杀死后有一定概率丢失消息,有一定延时率。</p>\n<p> (二)小米推送:<br> 之前在确定需求时，有提出第三世界的国家，例如:印度，他可能购买了中国的手机比如小米手机，还有一个情况：国产手机在国外使用的情况【Umeng解决】<br> (1)原理:采用系统长连接方式推送。只要系统不死，可以保证90%的推送到达率,原生和MIUI系统上有良好的存活率。<br> (2)此方案使用时候，需要看小米用户的数量来决定是否采用。</p>\n<p> (三)Google原生服务GCM【现已升级为FCM】<br> (1)原理:App服务器向GCM连接服务器发送HTTP/XMPP请求，GCM存储相关推送信息，并通过一个Token作为表示，并向注册了GCM服务的客户端推送特定消息。<br> (2)存在问题：FCM服务必须是在安装了googleplayServer才能正常运行。</p>\n<p> 综上分析:采用Umeng和Google FCM作为方案。针对国外的渠道，采用FCM推送，国内的渠道，采用Umeng推送。</p>\n<p> 有一个基于FCM的方案OneSignal[<a href=\"https://documentation.onesignal.com\">https://documentation.onesignal.com</a>] 他提供了一个管理后台，对APP对达到率,推送的延迟率，用户量等的数据统计服务。<br> 根据实际需求:后台单独会做相关的数据统计，所以不考虑此方案。<br> 需要思考的几个问题:<br> 1.FCM是否可以进行群推【查看相应的API】<br> 2.需要对推送的方案进行单独模块划分并配置<br> 3.客户端原先旧版升级到新版推送方案切换的问题。</p>\n<p> 客户端需要评估方案的集成：<br> 1.将推送部分分模块进行集成:其中涉及到，各个不同的模块对进行推送相关操作时候，需要添加相关的权限。单独在AndroidManifest.xml中配置会导致权限混乱。<br>  添加相关的权限时候，指定渠道名称，通过代码动态写入的方式。<br> 2.当然采用两种推送方案的时候，需要写一个管理类PushManager对推送方案进行判断:国外的手机并且安装了google play server的手机采用FCM的推送方式 </p>\n"},{"title":"开发经验汇总","_content":"1.时间转化中的一个小细节 传入的值是int 需要转化成long类型不能直接修改相应的函数 \n也是一个习惯 理解的到位\n比如 a * 1000L 转化成long类型 \n\n2.分支合并和创建的时候需要注意 符合git-flow的规范。比如我在/release_版本号/下需要修改某个bug 那可以在改分支的底部再去建立一个debug分支，需要你把你的debug分支merge到release下的某一个版本号下去。然后去删除掉该版本下对应的debug子分支。这样做的一个好处是也使得代码更加的规范化 \n\n3.开发中遇到的问题和解决方案:\n今天开发中遇到比较多的问题 \n1.在开发相关滑动的折叠ToolBar的问题时，使用了ToolBarLayout和CoordinatorLayout应该是一个控制器，用来控制他内部的相关子View。作为顶层布局。协调子布局的相关联动。\n在使用的时候使用字符串app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"该字符串对应的是 AppBarLayout.ScrollingViewBehavior.\nLayout behavor\n一般的情况都是ToolBar需要进行相应的折叠，但是我自己的项目中遇到的问题是如何让ToollBar固定，但是下面的那一个List进行滑动。后来我想折叠的是上面的那块Toolbar，于是可以反过来，设置layout_behavior为滚动。参考资料:[http://www.jianshu.com/p/7caa5f4f49bd] \n\n解决Toolbar固定不动的问题:解决这个问题的时候 只要设置下面的View的 layout_behavor \napp:layout_scrollFlags=\"scroll|exitUntilCollapsed”设置成滚动状态就OK了\n\n\n4.设置app:layout_behavor的时候应该注意，只有是CoordinatorLayout的直接子View才能启到相应的作用否则设置滚动事没有任何作用的。\n\n5.在设置布局的时候 ，需要让RecycleView进行滚动，这个时候需要在RecycleView的外面包ScrollView。当然还有一个下来刷新的SwipeRefreshLayout 需要嵌套在ScrollView的外面。当然这一堆是事件冲突处理也是很麻烦的。所以最好使用NestedScrollView 谷歌已经帮你处理好了相应的事件\n\n6.参考资料:[http://crazyandcoder.github.io/2016/07/18/android%20%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E2%80%94NestedScrollView%20%E5%B5%8C%E5%A5%97%20RecyclerView%E6%BB%91%E5%8A%A8%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/]NestedScrollView嵌套RecycleView滑动卡顿问题 \n\n7.今天还有一个问题：我将RecycleView放到NestedScrollView里面去之后，发现RecycleView只显示了其中的第一条数据。于是你可以将LayoutManager进行重写，指定一个LayoutManager放到RecycleView去。[http://www.cnblogs.com/woaixingxing/p/6098726.html]\n\n8 重写布局的过程中还碰到了崩溃 Java.lang.IndexOutOfBoundsException.这是由于SwipeRefreshLayout嵌套在RecycleView里面导致的问题。\n\n\n9项目中碰到了很多的事件冲突导致的问题：我自己自定义写了一个可以折叠的GridView。折叠的时候发现，当我点击加载更多的时候，发现：这个GridView无法折叠了。原因是GridView嵌套在NestedScrollView 事件是由他的父容器向子容器去传递的，现在父容器消费掉了这个滑动的事件，子容器也就得不到相应了。那就必须把这个事件拦截处理掉。\n\n=======================\n\n2017-1-10\n今日开发总结 今天主要在开发NestedScrollView 嵌套RecycleView的时候碰到了一些事件点击问题 \n1.当自己写的一个自定义的组件的UI和RecycleView组合起来嵌套在NestedScrollView里，发现点击不了RecycleView的每一个item。后来查找原因找到了原来点击事件有问题：不应该在onCreateViewHolder中 应该在onBindViewHolder中注册 \n\n2.使用cardView来代替直接写一个带有shape.xml做背景的View。这样的好处显而易见：shae.xml要写一堆很难管理和维护，但是cardView直接可以设置圆角而且又是系统推荐的方式，那何乐而不为呢。当然用一个组件他有优点肯定也有缺点。\n\n3.注意：RecycleView进行监听每一个item的注册事件的时候，需要单独的去写一个监听的接口来实现，而并不能像ListView那样setOnItemClickListener。\n\n4.设置透明的Toolbar的时候，其实需要注意的一点是:其实自定义来写整个Layout的时候 可以在外包一层AppLayout然后设置这个layout的backgroud就可以了 \n\n5.还有一个小的细节点:我从别人那边合并分支了之后，碰到RecyleView的那个包导入了但是没法编译了，其实是工具的使用问题:在顶部有一个try-again 然后点击菜单中的run-make model 再make project 就好了。\n\n6.今天同事有提到：在做UI开发的时候应该需要按照标准去实施，然后让UI的同事去提测。不要自己去用自己的标准去做。这样以后调试会很麻烦。看不懂Sketch就要问。然后测试的时候千万别忘记用低分辨率的手机也去测试一下，不要留下任何的问题。把事情做的完美。\n\n\n7.图片的资源文件应该压缩一下[https://tinypng.com/] 压缩的时候要注意这个工具只能传20张图片，不要重复压缩或者这个细节没注意到压缩了两次或者漏掉压缩\n\n8.其实每天都可以发现 做了很多重复的劳动：将RecycleView做成一个模板 参考资料:\n[http://www.jianshu.com/p/e8ac0c284601]\n\n9.RecycleView资料[http://blog.csdn.net/dl10210950/article/details/52918019]\n\n\n============================================================================\n\n2017-1-12 开发经验汇总 \n1.今天遇到在ScrollView里面嵌套一个View和RecycleView的时候，下面的RecycleView会把上面的View枪战掉，导致把整块View上推。原因：因为RecycleView把ScollView的焦点抢占掉了。导致RecycleView获取了焦点。这个问题和一个EditText获取了焦点会自动弹出软键盘一样的道理：当时是让EditText的父容器获取焦点。\n【解决方案】：当使用EditText的时候 会自动弹出软键盘 影响客户体验 这个时候让父容器获得焦点就可以完美解决这个问题 \nandroid:focusable=\"true\"   \nandroid:focusableInTouchMode=\"true\" \n\n2.开发技巧:每次类很多的情况下一个个找非常繁琐：可以按2下Shift键,然后查找，再在左侧的菜单栏去选择那个小圆圈的按钮。可以直接定位到相关的页面上去。\n\n==============================================================================\n\n2017-1-13 开发经验汇总 \n\n1.整理资源包的时候:首先去master上去更新代码，更新到最新的代码。然后在新建一个teststring分支，将Master上的代码合并上去，接着将最新的资源文件去替换，删除掉多余的别的国家的语言资源包，如果少了文字将编译不通过。然后补充。接着再切换到master分支补充完整,将teststring分支删除掉 \n\n2.资源打包:打开build菜单栏———>选择Select Build Variants 其中打包tuyasmart 里的有一个 Build Variant 选择 onLineRelease Debug和Release的区别就是证书不一样 点击build生成apk文件 apk的路径在项目名称下----build ----outputs \n\n===============================================================================\n\n2017-1-14 开发经验总结 \n\n1.实现一个功能:显示离线设备的数量，可以在MVP的View接口上定义一个方法，然后以回调的形式去拿到他，刷新UI。不要去定义一个全局变量，这样会导致很多问题。不要以设置变量，将逻辑处理完之后，主页Fragment或者Activity直接拿到回调，然后刷新UI。\n\n2.AppBarLayout会出现阴影的效果，影响UI的开发体验。在AppBarLayout中增加标签:\napp:elevation = \"0dp\"达到了适配的效果。\n参考资料[http://blog.csdn.net/dreamsever/article/details/52672739]\n\n3.可以将变量用%d一串字符来表示 使用String.format()的方式 注意占位符是在后面的 不要搞错 %d表示的是数字 %s是字符 \n\n\n===============================================================================\n\n2017-1-16开发经验总结 \n1.今天发现在NestedScrollView中嵌套RecycleView导致了滑动的冲突，效率很低。这个时候需要去实现另外一套解决方案。发现在Adapter扩展\n\n===============================================================================\n\n2017-1-19开发经验 \n1.开发中有遇到RecycleView的headView设置的时候会出现布局设置了match_parent,实际在放到headView中的时候会遇到问题 \n[http://stackoverflow.com/questions/30691150/match-parent-width-does-not-work-in-recyclerview]\n\n\n2017-1-21 开发经验 \n1.今天发现首页需要改一个布局的需求：首页在更改布局的时候，居然出现用CardView 在低版本上有个色块，需要去掉。找布局的原因不是很好找。有一个Android的工具AndroidMonitor。工具的不会使用导致了效率的下降。\n\n2.每次修改程序之后，都要编译会很慢。这个时候应该选择debug模式。在Android buildVariants里选择 Build Variant中的 PreviewDebug。这样每次都不会重新编译了。\n\n3.今天和领导聊到工作效率的问题：1.专业技能只能靠自己去提升基本功。包括数据结构，Java基础，自己去看thinking in java. 2.时间评估：将学习的时间也要评估进去。而且每一个细节都要抓的很紧，时间点的落实应该是落实到每一个细节中。整理归纳。时间的评估和需求的整理也是一个迭代的过程。本项目结束之后，需要总结整理，时间的漏洞在哪里。\n下次制定目标时候，作为参考。当然自己在执行中严格把控好时间，若是到了第三个节点发现一个问题卡住了，应该及时去沟通交流。每月目标定制的时候，需要交流想法，执行中所遇到的坑多踩，多去总结。3.客户体验这一块，参考谷歌原生的APP，去做一次调研，APP的设计好处，交互流程。需要自定义组件。4.知识的提前储备：明年公司的业务主要偏向于摄像头和蓝牙两块重点知识提前储备。\n","source":"_posts/开发经验.md","raw":"---\ntitle: 开发经验汇总\n---\n1.时间转化中的一个小细节 传入的值是int 需要转化成long类型不能直接修改相应的函数 \n也是一个习惯 理解的到位\n比如 a * 1000L 转化成long类型 \n\n2.分支合并和创建的时候需要注意 符合git-flow的规范。比如我在/release_版本号/下需要修改某个bug 那可以在改分支的底部再去建立一个debug分支，需要你把你的debug分支merge到release下的某一个版本号下去。然后去删除掉该版本下对应的debug子分支。这样做的一个好处是也使得代码更加的规范化 \n\n3.开发中遇到的问题和解决方案:\n今天开发中遇到比较多的问题 \n1.在开发相关滑动的折叠ToolBar的问题时，使用了ToolBarLayout和CoordinatorLayout应该是一个控制器，用来控制他内部的相关子View。作为顶层布局。协调子布局的相关联动。\n在使用的时候使用字符串app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"该字符串对应的是 AppBarLayout.ScrollingViewBehavior.\nLayout behavor\n一般的情况都是ToolBar需要进行相应的折叠，但是我自己的项目中遇到的问题是如何让ToollBar固定，但是下面的那一个List进行滑动。后来我想折叠的是上面的那块Toolbar，于是可以反过来，设置layout_behavior为滚动。参考资料:[http://www.jianshu.com/p/7caa5f4f49bd] \n\n解决Toolbar固定不动的问题:解决这个问题的时候 只要设置下面的View的 layout_behavor \napp:layout_scrollFlags=\"scroll|exitUntilCollapsed”设置成滚动状态就OK了\n\n\n4.设置app:layout_behavor的时候应该注意，只有是CoordinatorLayout的直接子View才能启到相应的作用否则设置滚动事没有任何作用的。\n\n5.在设置布局的时候 ，需要让RecycleView进行滚动，这个时候需要在RecycleView的外面包ScrollView。当然还有一个下来刷新的SwipeRefreshLayout 需要嵌套在ScrollView的外面。当然这一堆是事件冲突处理也是很麻烦的。所以最好使用NestedScrollView 谷歌已经帮你处理好了相应的事件\n\n6.参考资料:[http://crazyandcoder.github.io/2016/07/18/android%20%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E2%80%94NestedScrollView%20%E5%B5%8C%E5%A5%97%20RecyclerView%E6%BB%91%E5%8A%A8%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/]NestedScrollView嵌套RecycleView滑动卡顿问题 \n\n7.今天还有一个问题：我将RecycleView放到NestedScrollView里面去之后，发现RecycleView只显示了其中的第一条数据。于是你可以将LayoutManager进行重写，指定一个LayoutManager放到RecycleView去。[http://www.cnblogs.com/woaixingxing/p/6098726.html]\n\n8 重写布局的过程中还碰到了崩溃 Java.lang.IndexOutOfBoundsException.这是由于SwipeRefreshLayout嵌套在RecycleView里面导致的问题。\n\n\n9项目中碰到了很多的事件冲突导致的问题：我自己自定义写了一个可以折叠的GridView。折叠的时候发现，当我点击加载更多的时候，发现：这个GridView无法折叠了。原因是GridView嵌套在NestedScrollView 事件是由他的父容器向子容器去传递的，现在父容器消费掉了这个滑动的事件，子容器也就得不到相应了。那就必须把这个事件拦截处理掉。\n\n=======================\n\n2017-1-10\n今日开发总结 今天主要在开发NestedScrollView 嵌套RecycleView的时候碰到了一些事件点击问题 \n1.当自己写的一个自定义的组件的UI和RecycleView组合起来嵌套在NestedScrollView里，发现点击不了RecycleView的每一个item。后来查找原因找到了原来点击事件有问题：不应该在onCreateViewHolder中 应该在onBindViewHolder中注册 \n\n2.使用cardView来代替直接写一个带有shape.xml做背景的View。这样的好处显而易见：shae.xml要写一堆很难管理和维护，但是cardView直接可以设置圆角而且又是系统推荐的方式，那何乐而不为呢。当然用一个组件他有优点肯定也有缺点。\n\n3.注意：RecycleView进行监听每一个item的注册事件的时候，需要单独的去写一个监听的接口来实现，而并不能像ListView那样setOnItemClickListener。\n\n4.设置透明的Toolbar的时候，其实需要注意的一点是:其实自定义来写整个Layout的时候 可以在外包一层AppLayout然后设置这个layout的backgroud就可以了 \n\n5.还有一个小的细节点:我从别人那边合并分支了之后，碰到RecyleView的那个包导入了但是没法编译了，其实是工具的使用问题:在顶部有一个try-again 然后点击菜单中的run-make model 再make project 就好了。\n\n6.今天同事有提到：在做UI开发的时候应该需要按照标准去实施，然后让UI的同事去提测。不要自己去用自己的标准去做。这样以后调试会很麻烦。看不懂Sketch就要问。然后测试的时候千万别忘记用低分辨率的手机也去测试一下，不要留下任何的问题。把事情做的完美。\n\n\n7.图片的资源文件应该压缩一下[https://tinypng.com/] 压缩的时候要注意这个工具只能传20张图片，不要重复压缩或者这个细节没注意到压缩了两次或者漏掉压缩\n\n8.其实每天都可以发现 做了很多重复的劳动：将RecycleView做成一个模板 参考资料:\n[http://www.jianshu.com/p/e8ac0c284601]\n\n9.RecycleView资料[http://blog.csdn.net/dl10210950/article/details/52918019]\n\n\n============================================================================\n\n2017-1-12 开发经验汇总 \n1.今天遇到在ScrollView里面嵌套一个View和RecycleView的时候，下面的RecycleView会把上面的View枪战掉，导致把整块View上推。原因：因为RecycleView把ScollView的焦点抢占掉了。导致RecycleView获取了焦点。这个问题和一个EditText获取了焦点会自动弹出软键盘一样的道理：当时是让EditText的父容器获取焦点。\n【解决方案】：当使用EditText的时候 会自动弹出软键盘 影响客户体验 这个时候让父容器获得焦点就可以完美解决这个问题 \nandroid:focusable=\"true\"   \nandroid:focusableInTouchMode=\"true\" \n\n2.开发技巧:每次类很多的情况下一个个找非常繁琐：可以按2下Shift键,然后查找，再在左侧的菜单栏去选择那个小圆圈的按钮。可以直接定位到相关的页面上去。\n\n==============================================================================\n\n2017-1-13 开发经验汇总 \n\n1.整理资源包的时候:首先去master上去更新代码，更新到最新的代码。然后在新建一个teststring分支，将Master上的代码合并上去，接着将最新的资源文件去替换，删除掉多余的别的国家的语言资源包，如果少了文字将编译不通过。然后补充。接着再切换到master分支补充完整,将teststring分支删除掉 \n\n2.资源打包:打开build菜单栏———>选择Select Build Variants 其中打包tuyasmart 里的有一个 Build Variant 选择 onLineRelease Debug和Release的区别就是证书不一样 点击build生成apk文件 apk的路径在项目名称下----build ----outputs \n\n===============================================================================\n\n2017-1-14 开发经验总结 \n\n1.实现一个功能:显示离线设备的数量，可以在MVP的View接口上定义一个方法，然后以回调的形式去拿到他，刷新UI。不要去定义一个全局变量，这样会导致很多问题。不要以设置变量，将逻辑处理完之后，主页Fragment或者Activity直接拿到回调，然后刷新UI。\n\n2.AppBarLayout会出现阴影的效果，影响UI的开发体验。在AppBarLayout中增加标签:\napp:elevation = \"0dp\"达到了适配的效果。\n参考资料[http://blog.csdn.net/dreamsever/article/details/52672739]\n\n3.可以将变量用%d一串字符来表示 使用String.format()的方式 注意占位符是在后面的 不要搞错 %d表示的是数字 %s是字符 \n\n\n===============================================================================\n\n2017-1-16开发经验总结 \n1.今天发现在NestedScrollView中嵌套RecycleView导致了滑动的冲突，效率很低。这个时候需要去实现另外一套解决方案。发现在Adapter扩展\n\n===============================================================================\n\n2017-1-19开发经验 \n1.开发中有遇到RecycleView的headView设置的时候会出现布局设置了match_parent,实际在放到headView中的时候会遇到问题 \n[http://stackoverflow.com/questions/30691150/match-parent-width-does-not-work-in-recyclerview]\n\n\n2017-1-21 开发经验 \n1.今天发现首页需要改一个布局的需求：首页在更改布局的时候，居然出现用CardView 在低版本上有个色块，需要去掉。找布局的原因不是很好找。有一个Android的工具AndroidMonitor。工具的不会使用导致了效率的下降。\n\n2.每次修改程序之后，都要编译会很慢。这个时候应该选择debug模式。在Android buildVariants里选择 Build Variant中的 PreviewDebug。这样每次都不会重新编译了。\n\n3.今天和领导聊到工作效率的问题：1.专业技能只能靠自己去提升基本功。包括数据结构，Java基础，自己去看thinking in java. 2.时间评估：将学习的时间也要评估进去。而且每一个细节都要抓的很紧，时间点的落实应该是落实到每一个细节中。整理归纳。时间的评估和需求的整理也是一个迭代的过程。本项目结束之后，需要总结整理，时间的漏洞在哪里。\n下次制定目标时候，作为参考。当然自己在执行中严格把控好时间，若是到了第三个节点发现一个问题卡住了，应该及时去沟通交流。每月目标定制的时候，需要交流想法，执行中所遇到的坑多踩，多去总结。3.客户体验这一块，参考谷歌原生的APP，去做一次调研，APP的设计好处，交互流程。需要自定义组件。4.知识的提前储备：明年公司的业务主要偏向于摄像头和蓝牙两块重点知识提前储备。\n","slug":"开发经验","published":1,"date":"2017-01-21T16:22:21.000Z","updated":"2017-01-21T16:22:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q6e000elyjdg5aneodn","content":"<p>1.时间转化中的一个小细节 传入的值是int 需要转化成long类型不能直接修改相应的函数<br>也是一个习惯 理解的到位<br>比如 a * 1000L 转化成long类型 </p>\n<p>2.分支合并和创建的时候需要注意 符合git-flow的规范。比如我在/release_版本号/下需要修改某个bug 那可以在改分支的底部再去建立一个debug分支，需要你把你的debug分支merge到release下的某一个版本号下去。然后去删除掉该版本下对应的debug子分支。这样做的一个好处是也使得代码更加的规范化 </p>\n<p>3.开发中遇到的问题和解决方案:<br>今天开发中遇到比较多的问题<br>1.在开发相关滑动的折叠ToolBar的问题时，使用了ToolBarLayout和CoordinatorLayout应该是一个控制器，用来控制他内部的相关子View。作为顶层布局。协调子布局的相关联动。<br>在使用的时候使用字符串app:layout_behavior=”@string/appbar_scrolling_view_behavior”该字符串对应的是 AppBarLayout.ScrollingViewBehavior.<br>Layout behavor<br>一般的情况都是ToolBar需要进行相应的折叠，但是我自己的项目中遇到的问题是如何让ToollBar固定，但是下面的那一个List进行滑动。后来我想折叠的是上面的那块Toolbar，于是可以反过来，设置layout_behavior为滚动。参考资料:[<a href=\"http://www.jianshu.com/p/7caa5f4f49bd\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/7caa5f4f49bd</a>] </p>\n<p>解决Toolbar固定不动的问题:解决这个问题的时候 只要设置下面的View的 layout_behavor<br>app:layout_scrollFlags=”scroll|exitUntilCollapsed”设置成滚动状态就OK了</p>\n<p>4.设置app:layout_behavor的时候应该注意，只有是CoordinatorLayout的直接子View才能启到相应的作用否则设置滚动事没有任何作用的。</p>\n<p>5.在设置布局的时候 ，需要让RecycleView进行滚动，这个时候需要在RecycleView的外面包ScrollView。当然还有一个下来刷新的SwipeRefreshLayout 需要嵌套在ScrollView的外面。当然这一堆是事件冲突处理也是很麻烦的。所以最好使用NestedScrollView 谷歌已经帮你处理好了相应的事件</p>\n<p>6.参考资料:[<a href=\"http://crazyandcoder.github.io/2016/07/18/android%20%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E2%80%94NestedScrollView%20%E5%B5%8C%E5%A5%97%20RecyclerView%E6%BB%91%E5%8A%A8%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/]NestedScrollView嵌套RecycleView滑动卡顿问题\" target=\"_blank\" rel=\"external\">http://crazyandcoder.github.io/2016/07/18/android%20%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E2%80%94NestedScrollView%20%E5%B5%8C%E5%A5%97%20RecyclerView%E6%BB%91%E5%8A%A8%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/]NestedScrollView嵌套RecycleView滑动卡顿问题</a> </p>\n<p>7.今天还有一个问题：我将RecycleView放到NestedScrollView里面去之后，发现RecycleView只显示了其中的第一条数据。于是你可以将LayoutManager进行重写，指定一个LayoutManager放到RecycleView去。[<a href=\"http://www.cnblogs.com/woaixingxing/p/6098726.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/woaixingxing/p/6098726.html</a>]</p>\n<p>8 重写布局的过程中还碰到了崩溃 Java.lang.IndexOutOfBoundsException.这是由于SwipeRefreshLayout嵌套在RecycleView里面导致的问题。</p>\n<p>9项目中碰到了很多的事件冲突导致的问题：我自己自定义写了一个可以折叠的GridView。折叠的时候发现，当我点击加载更多的时候，发现：这个GridView无法折叠了。原因是GridView嵌套在NestedScrollView 事件是由他的父容器向子容器去传递的，现在父容器消费掉了这个滑动的事件，子容器也就得不到相应了。那就必须把这个事件拦截处理掉。</p>\n<p>=======================</p>\n<p>2017-1-10<br>今日开发总结 今天主要在开发NestedScrollView 嵌套RecycleView的时候碰到了一些事件点击问题<br>1.当自己写的一个自定义的组件的UI和RecycleView组合起来嵌套在NestedScrollView里，发现点击不了RecycleView的每一个item。后来查找原因找到了原来点击事件有问题：不应该在onCreateViewHolder中 应该在onBindViewHolder中注册 </p>\n<p>2.使用cardView来代替直接写一个带有shape.xml做背景的View。这样的好处显而易见：shae.xml要写一堆很难管理和维护，但是cardView直接可以设置圆角而且又是系统推荐的方式，那何乐而不为呢。当然用一个组件他有优点肯定也有缺点。</p>\n<p>3.注意：RecycleView进行监听每一个item的注册事件的时候，需要单独的去写一个监听的接口来实现，而并不能像ListView那样setOnItemClickListener。</p>\n<p>4.设置透明的Toolbar的时候，其实需要注意的一点是:其实自定义来写整个Layout的时候 可以在外包一层AppLayout然后设置这个layout的backgroud就可以了 </p>\n<p>5.还有一个小的细节点:我从别人那边合并分支了之后，碰到RecyleView的那个包导入了但是没法编译了，其实是工具的使用问题:在顶部有一个try-again 然后点击菜单中的run-make model 再make project 就好了。</p>\n<p>6.今天同事有提到：在做UI开发的时候应该需要按照标准去实施，然后让UI的同事去提测。不要自己去用自己的标准去做。这样以后调试会很麻烦。看不懂Sketch就要问。然后测试的时候千万别忘记用低分辨率的手机也去测试一下，不要留下任何的问题。把事情做的完美。</p>\n<p>7.图片的资源文件应该压缩一下[<a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"external\">https://tinypng.com/</a>] 压缩的时候要注意这个工具只能传20张图片，不要重复压缩或者这个细节没注意到压缩了两次或者漏掉压缩</p>\n<p>8.其实每天都可以发现 做了很多重复的劳动：将RecycleView做成一个模板 参考资料:<br>[<a href=\"http://www.jianshu.com/p/e8ac0c284601\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/e8ac0c284601</a>]</p>\n<p>9.RecycleView资料[<a href=\"http://blog.csdn.net/dl10210950/article/details/52918019\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/dl10210950/article/details/52918019</a>]</p>\n<p>============================================================================</p>\n<p>2017-1-12 开发经验汇总<br>1.今天遇到在ScrollView里面嵌套一个View和RecycleView的时候，下面的RecycleView会把上面的View枪战掉，导致把整块View上推。原因：因为RecycleView把ScollView的焦点抢占掉了。导致RecycleView获取了焦点。这个问题和一个EditText获取了焦点会自动弹出软键盘一样的道理：当时是让EditText的父容器获取焦点。<br>【解决方案】：当使用EditText的时候 会自动弹出软键盘 影响客户体验 这个时候让父容器获得焦点就可以完美解决这个问题<br>android:focusable=”true”<br>android:focusableInTouchMode=”true” </p>\n<p>2.开发技巧:每次类很多的情况下一个个找非常繁琐：可以按2下Shift键,然后查找，再在左侧的菜单栏去选择那个小圆圈的按钮。可以直接定位到相关的页面上去。</p>\n<p>==============================================================================</p>\n<p>2017-1-13 开发经验汇总 </p>\n<p>1.整理资源包的时候:首先去master上去更新代码，更新到最新的代码。然后在新建一个teststring分支，将Master上的代码合并上去，接着将最新的资源文件去替换，删除掉多余的别的国家的语言资源包，如果少了文字将编译不通过。然后补充。接着再切换到master分支补充完整,将teststring分支删除掉 </p>\n<p>2.资源打包:打开build菜单栏———&gt;选择Select Build Variants 其中打包tuyasmart 里的有一个 Build Variant 选择 onLineRelease Debug和Release的区别就是证书不一样 点击build生成apk文件 apk的路径在项目名称下—-build —-outputs </p>\n<p>===============================================================================</p>\n<p>2017-1-14 开发经验总结 </p>\n<p>1.实现一个功能:显示离线设备的数量，可以在MVP的View接口上定义一个方法，然后以回调的形式去拿到他，刷新UI。不要去定义一个全局变量，这样会导致很多问题。不要以设置变量，将逻辑处理完之后，主页Fragment或者Activity直接拿到回调，然后刷新UI。</p>\n<p>2.AppBarLayout会出现阴影的效果，影响UI的开发体验。在AppBarLayout中增加标签:<br>app:elevation = “0dp”达到了适配的效果。<br>参考资料[<a href=\"http://blog.csdn.net/dreamsever/article/details/52672739\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/dreamsever/article/details/52672739</a>]</p>\n<p>3.可以将变量用%d一串字符来表示 使用String.format()的方式 注意占位符是在后面的 不要搞错 %d表示的是数字 %s是字符 </p>\n<p>===============================================================================</p>\n<p>2017-1-16开发经验总结<br>1.今天发现在NestedScrollView中嵌套RecycleView导致了滑动的冲突，效率很低。这个时候需要去实现另外一套解决方案。发现在Adapter扩展</p>\n<p>===============================================================================</p>\n<p>2017-1-19开发经验<br>1.开发中有遇到RecycleView的headView设置的时候会出现布局设置了match_parent,实际在放到headView中的时候会遇到问题<br>[<a href=\"http://stackoverflow.com/questions/30691150/match-parent-width-does-not-work-in-recyclerview\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/30691150/match-parent-width-does-not-work-in-recyclerview</a>]</p>\n<p>2017-1-21 开发经验<br>1.今天发现首页需要改一个布局的需求：首页在更改布局的时候，居然出现用CardView 在低版本上有个色块，需要去掉。找布局的原因不是很好找。有一个Android的工具AndroidMonitor。工具的不会使用导致了效率的下降。</p>\n<p>2.每次修改程序之后，都要编译会很慢。这个时候应该选择debug模式。在Android buildVariants里选择 Build Variant中的 PreviewDebug。这样每次都不会重新编译了。</p>\n<p>3.今天和领导聊到工作效率的问题：1.专业技能只能靠自己去提升基本功。包括数据结构，Java基础，自己去看thinking in java. 2.时间评估：将学习的时间也要评估进去。而且每一个细节都要抓的很紧，时间点的落实应该是落实到每一个细节中。整理归纳。时间的评估和需求的整理也是一个迭代的过程。本项目结束之后，需要总结整理，时间的漏洞在哪里。<br>下次制定目标时候，作为参考。当然自己在执行中严格把控好时间，若是到了第三个节点发现一个问题卡住了，应该及时去沟通交流。每月目标定制的时候，需要交流想法，执行中所遇到的坑多踩，多去总结。3.客户体验这一块，参考谷歌原生的APP，去做一次调研，APP的设计好处，交互流程。需要自定义组件。4.知识的提前储备：明年公司的业务主要偏向于摄像头和蓝牙两块重点知识提前储备。</p>\n","excerpt":"","more":"<p>1.时间转化中的一个小细节 传入的值是int 需要转化成long类型不能直接修改相应的函数<br>也是一个习惯 理解的到位<br>比如 a * 1000L 转化成long类型 </p>\n<p>2.分支合并和创建的时候需要注意 符合git-flow的规范。比如我在/release_版本号/下需要修改某个bug 那可以在改分支的底部再去建立一个debug分支，需要你把你的debug分支merge到release下的某一个版本号下去。然后去删除掉该版本下对应的debug子分支。这样做的一个好处是也使得代码更加的规范化 </p>\n<p>3.开发中遇到的问题和解决方案:<br>今天开发中遇到比较多的问题<br>1.在开发相关滑动的折叠ToolBar的问题时，使用了ToolBarLayout和CoordinatorLayout应该是一个控制器，用来控制他内部的相关子View。作为顶层布局。协调子布局的相关联动。<br>在使用的时候使用字符串app:layout_behavior=”@string/appbar_scrolling_view_behavior”该字符串对应的是 AppBarLayout.ScrollingViewBehavior.<br>Layout behavor<br>一般的情况都是ToolBar需要进行相应的折叠，但是我自己的项目中遇到的问题是如何让ToollBar固定，但是下面的那一个List进行滑动。后来我想折叠的是上面的那块Toolbar，于是可以反过来，设置layout_behavior为滚动。参考资料:[<a href=\"http://www.jianshu.com/p/7caa5f4f49bd\">http://www.jianshu.com/p/7caa5f4f49bd</a>] </p>\n<p>解决Toolbar固定不动的问题:解决这个问题的时候 只要设置下面的View的 layout_behavor<br>app:layout_scrollFlags=”scroll|exitUntilCollapsed”设置成滚动状态就OK了</p>\n<p>4.设置app:layout_behavor的时候应该注意，只有是CoordinatorLayout的直接子View才能启到相应的作用否则设置滚动事没有任何作用的。</p>\n<p>5.在设置布局的时候 ，需要让RecycleView进行滚动，这个时候需要在RecycleView的外面包ScrollView。当然还有一个下来刷新的SwipeRefreshLayout 需要嵌套在ScrollView的外面。当然这一堆是事件冲突处理也是很麻烦的。所以最好使用NestedScrollView 谷歌已经帮你处理好了相应的事件</p>\n<p>6.参考资料:[<a href=\"http://crazyandcoder.github.io/2016/07/18/android%20%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E2%80%94NestedScrollView%20%E5%B5%8C%E5%A5%97%20RecyclerView%E6%BB%91%E5%8A%A8%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/]NestedScrollView嵌套RecycleView滑动卡顿问题\">http://crazyandcoder.github.io/2016/07/18/android%20%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E2%80%94NestedScrollView%20%E5%B5%8C%E5%A5%97%20RecyclerView%E6%BB%91%E5%8A%A8%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/]NestedScrollView嵌套RecycleView滑动卡顿问题</a> </p>\n<p>7.今天还有一个问题：我将RecycleView放到NestedScrollView里面去之后，发现RecycleView只显示了其中的第一条数据。于是你可以将LayoutManager进行重写，指定一个LayoutManager放到RecycleView去。[<a href=\"http://www.cnblogs.com/woaixingxing/p/6098726.html\">http://www.cnblogs.com/woaixingxing/p/6098726.html</a>]</p>\n<p>8 重写布局的过程中还碰到了崩溃 Java.lang.IndexOutOfBoundsException.这是由于SwipeRefreshLayout嵌套在RecycleView里面导致的问题。</p>\n<p>9项目中碰到了很多的事件冲突导致的问题：我自己自定义写了一个可以折叠的GridView。折叠的时候发现，当我点击加载更多的时候，发现：这个GridView无法折叠了。原因是GridView嵌套在NestedScrollView 事件是由他的父容器向子容器去传递的，现在父容器消费掉了这个滑动的事件，子容器也就得不到相应了。那就必须把这个事件拦截处理掉。</p>\n<p>=======================</p>\n<p>2017-1-10<br>今日开发总结 今天主要在开发NestedScrollView 嵌套RecycleView的时候碰到了一些事件点击问题<br>1.当自己写的一个自定义的组件的UI和RecycleView组合起来嵌套在NestedScrollView里，发现点击不了RecycleView的每一个item。后来查找原因找到了原来点击事件有问题：不应该在onCreateViewHolder中 应该在onBindViewHolder中注册 </p>\n<p>2.使用cardView来代替直接写一个带有shape.xml做背景的View。这样的好处显而易见：shae.xml要写一堆很难管理和维护，但是cardView直接可以设置圆角而且又是系统推荐的方式，那何乐而不为呢。当然用一个组件他有优点肯定也有缺点。</p>\n<p>3.注意：RecycleView进行监听每一个item的注册事件的时候，需要单独的去写一个监听的接口来实现，而并不能像ListView那样setOnItemClickListener。</p>\n<p>4.设置透明的Toolbar的时候，其实需要注意的一点是:其实自定义来写整个Layout的时候 可以在外包一层AppLayout然后设置这个layout的backgroud就可以了 </p>\n<p>5.还有一个小的细节点:我从别人那边合并分支了之后，碰到RecyleView的那个包导入了但是没法编译了，其实是工具的使用问题:在顶部有一个try-again 然后点击菜单中的run-make model 再make project 就好了。</p>\n<p>6.今天同事有提到：在做UI开发的时候应该需要按照标准去实施，然后让UI的同事去提测。不要自己去用自己的标准去做。这样以后调试会很麻烦。看不懂Sketch就要问。然后测试的时候千万别忘记用低分辨率的手机也去测试一下，不要留下任何的问题。把事情做的完美。</p>\n<p>7.图片的资源文件应该压缩一下[<a href=\"https://tinypng.com/\">https://tinypng.com/</a>] 压缩的时候要注意这个工具只能传20张图片，不要重复压缩或者这个细节没注意到压缩了两次或者漏掉压缩</p>\n<p>8.其实每天都可以发现 做了很多重复的劳动：将RecycleView做成一个模板 参考资料:<br>[<a href=\"http://www.jianshu.com/p/e8ac0c284601\">http://www.jianshu.com/p/e8ac0c284601</a>]</p>\n<p>9.RecycleView资料[<a href=\"http://blog.csdn.net/dl10210950/article/details/52918019\">http://blog.csdn.net/dl10210950/article/details/52918019</a>]</p>\n<p>============================================================================</p>\n<p>2017-1-12 开发经验汇总<br>1.今天遇到在ScrollView里面嵌套一个View和RecycleView的时候，下面的RecycleView会把上面的View枪战掉，导致把整块View上推。原因：因为RecycleView把ScollView的焦点抢占掉了。导致RecycleView获取了焦点。这个问题和一个EditText获取了焦点会自动弹出软键盘一样的道理：当时是让EditText的父容器获取焦点。<br>【解决方案】：当使用EditText的时候 会自动弹出软键盘 影响客户体验 这个时候让父容器获得焦点就可以完美解决这个问题<br>android:focusable=”true”<br>android:focusableInTouchMode=”true” </p>\n<p>2.开发技巧:每次类很多的情况下一个个找非常繁琐：可以按2下Shift键,然后查找，再在左侧的菜单栏去选择那个小圆圈的按钮。可以直接定位到相关的页面上去。</p>\n<p>==============================================================================</p>\n<p>2017-1-13 开发经验汇总 </p>\n<p>1.整理资源包的时候:首先去master上去更新代码，更新到最新的代码。然后在新建一个teststring分支，将Master上的代码合并上去，接着将最新的资源文件去替换，删除掉多余的别的国家的语言资源包，如果少了文字将编译不通过。然后补充。接着再切换到master分支补充完整,将teststring分支删除掉 </p>\n<p>2.资源打包:打开build菜单栏———&gt;选择Select Build Variants 其中打包tuyasmart 里的有一个 Build Variant 选择 onLineRelease Debug和Release的区别就是证书不一样 点击build生成apk文件 apk的路径在项目名称下—-build —-outputs </p>\n<p>===============================================================================</p>\n<p>2017-1-14 开发经验总结 </p>\n<p>1.实现一个功能:显示离线设备的数量，可以在MVP的View接口上定义一个方法，然后以回调的形式去拿到他，刷新UI。不要去定义一个全局变量，这样会导致很多问题。不要以设置变量，将逻辑处理完之后，主页Fragment或者Activity直接拿到回调，然后刷新UI。</p>\n<p>2.AppBarLayout会出现阴影的效果，影响UI的开发体验。在AppBarLayout中增加标签:<br>app:elevation = “0dp”达到了适配的效果。<br>参考资料[<a href=\"http://blog.csdn.net/dreamsever/article/details/52672739\">http://blog.csdn.net/dreamsever/article/details/52672739</a>]</p>\n<p>3.可以将变量用%d一串字符来表示 使用String.format()的方式 注意占位符是在后面的 不要搞错 %d表示的是数字 %s是字符 </p>\n<p>===============================================================================</p>\n<p>2017-1-16开发经验总结<br>1.今天发现在NestedScrollView中嵌套RecycleView导致了滑动的冲突，效率很低。这个时候需要去实现另外一套解决方案。发现在Adapter扩展</p>\n<p>===============================================================================</p>\n<p>2017-1-19开发经验<br>1.开发中有遇到RecycleView的headView设置的时候会出现布局设置了match_parent,实际在放到headView中的时候会遇到问题<br>[<a href=\"http://stackoverflow.com/questions/30691150/match-parent-width-does-not-work-in-recyclerview\">http://stackoverflow.com/questions/30691150/match-parent-width-does-not-work-in-recyclerview</a>]</p>\n<p>2017-1-21 开发经验<br>1.今天发现首页需要改一个布局的需求：首页在更改布局的时候，居然出现用CardView 在低版本上有个色块，需要去掉。找布局的原因不是很好找。有一个Android的工具AndroidMonitor。工具的不会使用导致了效率的下降。</p>\n<p>2.每次修改程序之后，都要编译会很慢。这个时候应该选择debug模式。在Android buildVariants里选择 Build Variant中的 PreviewDebug。这样每次都不会重新编译了。</p>\n<p>3.今天和领导聊到工作效率的问题：1.专业技能只能靠自己去提升基本功。包括数据结构，Java基础，自己去看thinking in java. 2.时间评估：将学习的时间也要评估进去。而且每一个细节都要抓的很紧，时间点的落实应该是落实到每一个细节中。整理归纳。时间的评估和需求的整理也是一个迭代的过程。本项目结束之后，需要总结整理，时间的漏洞在哪里。<br>下次制定目标时候，作为参考。当然自己在执行中严格把控好时间，若是到了第三个节点发现一个问题卡住了，应该及时去沟通交流。每月目标定制的时候，需要交流想法，执行中所遇到的坑多踩，多去总结。3.客户体验这一块，参考谷歌原生的APP，去做一次调研，APP的设计好处，交互流程。需要自定义组件。4.知识的提前储备：明年公司的业务主要偏向于摄像头和蓝牙两块重点知识提前储备。</p>\n"},{"title":"搭建Hexo博客中遇到的问题","_content":"\n搭建github博客采用hexo来搭建静态博客\n\n参考资料[https://wsgzao.github.io/post/hexo-guide/#了解Hexo]\n\n2.安装Hexo \nnpm install hexo-cli -g\nnpm install hexo hexo --save\n\n3.初始化hexo \n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n\n\n4.预览 hexo server 成功之后可以登录 localhost:4000\n\n5.简写命令\n hexo n 生成文章\n hexo s 本地发布预览效果\n hexo g 生成public 静态文件\n\n6.我喜欢用我自己觉得喜欢的样式来进行装饰\n 使用方法参考[http://moxfive.coding.me/yelee/1.Getting-Started/i18n.html]\n\n要点:1.首先 git clone 下来主题 \n2.重点的重点：需要配置 _config.yml 需要指定theme的来源 \n然后要执行 这个命令 hexo clean && hexo s 不要忘记\n\n在github上建立一个仓库 username.github.io为仓库名 \n然后切换到所在的博客的目录下使用命令hexo g 生成public文件夹 \n\n【重点】特别注意生成了public文件夹之后 你需要将public文件夹下面的所有的静态资源文件放入到刚才建立的仓库下去 然后提交到github仓库上去 \n访问的URL[weipingQin.github.io]\n\nhttp://moxfive.coding.me/yelee/1.Getting-Started/i18n.html\n\n","source":"_posts/如何搭建github博客.md","raw":"---\ntitle: 搭建hexo博客中遇到的问题\n---\n\n搭建github博客采用hexo来搭建静态博客\n\n参考资料[https://wsgzao.github.io/post/hexo-guide/#了解Hexo]\n\n2.安装Hexo \nnpm install hexo-cli -g\nnpm install hexo hexo --save\n\n3.初始化hexo \n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n\n\n4.预览 hexo server 成功之后可以登录 localhost:4000\n\n5.简写命令\n hexo n 生成文章\n hexo s 本地发布预览效果\n hexo g 生成public 静态文件\n\n6.我喜欢用我自己觉得喜欢的样式来进行装饰\n 使用方法参考[http://moxfive.coding.me/yelee/1.Getting-Started/i18n.html]\n\n要点:1.首先 git clone 下来主题 \n2.重点的重点：需要配置 _config.yml 需要指定theme的来源 \n然后要执行 这个命令 hexo clean && hexo s 不要忘记\n\n在github上建立一个仓库 username.github.io为仓库名 \n然后切换到所在的博客的目录下使用命令hexo g 生成public文件夹 \n\n【重点】特别注意生成了public文件夹之后 你需要将public文件夹下面的所有的静态资源文件放入到刚才建立的仓库下去 然后提交到github仓库上去 \n访问的URL[weipingQin.github.io]\n\nhttp://moxfive.coding.me/yelee/1.Getting-Started/i18n.html\n\n","slug":"如何搭建github博客","published":1,"date":"2017-01-04T07:08:51.000Z","updated":"2017-01-25T13:31:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q6g000flyjd1waeu9ye","content":"<p>搭建github博客采用hexo来搭建静态博客</p>\n<p>参考资料[<a href=\"https://wsgzao.github.io/post/hexo-guide/#了解Hexo\" target=\"_blank\" rel=\"external\">https://wsgzao.github.io/post/hexo-guide/#了解Hexo</a>]</p>\n<p>2.安装Hexo<br>npm install hexo-cli -g<br>npm install hexo hexo –save</p>\n<p>3.初始化hexo<br>$ hexo init <folder><br>$ cd <folder><br>$ npm install</folder></folder></p>\n<p>4.预览 hexo server 成功之后可以登录 localhost:4000</p>\n<p>5.简写命令<br> hexo n 生成文章<br> hexo s 本地发布预览效果<br> hexo g 生成public 静态文件</p>\n<p>6.我喜欢用我自己觉得喜欢的样式来进行装饰<br> 使用方法参考[<a href=\"http://moxfive.coding.me/yelee/1.Getting-Started/i18n.html\" target=\"_blank\" rel=\"external\">http://moxfive.coding.me/yelee/1.Getting-Started/i18n.html</a>]</p>\n<p>要点:1.首先 git clone 下来主题<br>2.重点的重点：需要配置 _config.yml 需要指定theme的来源<br>然后要执行 这个命令 hexo clean &amp;&amp; hexo s 不要忘记</p>\n<p>在github上建立一个仓库 username.github.io为仓库名<br>然后切换到所在的博客的目录下使用命令hexo g 生成public文件夹 </p>\n<p>【重点】特别注意生成了public文件夹之后 你需要将public文件夹下面的所有的静态资源文件放入到刚才建立的仓库下去 然后提交到github仓库上去<br>访问的URL[weipingQin.github.io]</p>\n<p><a href=\"http://moxfive.coding.me/yelee/1.Getting-Started/i18n.html\" target=\"_blank\" rel=\"external\">http://moxfive.coding.me/yelee/1.Getting-Started/i18n.html</a></p>\n","excerpt":"","more":"<p>搭建github博客采用hexo来搭建静态博客</p>\n<p>参考资料[<a href=\"https://wsgzao.github.io/post/hexo-guide/#了解Hexo\">https://wsgzao.github.io/post/hexo-guide/#了解Hexo</a>]</p>\n<p>2.安装Hexo<br>npm install hexo-cli -g<br>npm install hexo hexo –save</p>\n<p>3.初始化hexo<br>$ hexo init <folder><br>$ cd <folder><br>$ npm install</p>\n<p>4.预览 hexo server 成功之后可以登录 localhost:4000</p>\n<p>5.简写命令<br> hexo n 生成文章<br> hexo s 本地发布预览效果<br> hexo g 生成public 静态文件</p>\n<p>6.我喜欢用我自己觉得喜欢的样式来进行装饰<br> 使用方法参考[<a href=\"http://moxfive.coding.me/yelee/1.Getting-Started/i18n.html\">http://moxfive.coding.me/yelee/1.Getting-Started/i18n.html</a>]</p>\n<p>要点:1.首先 git clone 下来主题<br>2.重点的重点：需要配置 _config.yml 需要指定theme的来源<br>然后要执行 这个命令 hexo clean &amp;&amp; hexo s 不要忘记</p>\n<p>在github上建立一个仓库 username.github.io为仓库名<br>然后切换到所在的博客的目录下使用命令hexo g 生成public文件夹 </p>\n<p>【重点】特别注意生成了public文件夹之后 你需要将public文件夹下面的所有的静态资源文件放入到刚才建立的仓库下去 然后提交到github仓库上去<br>访问的URL[weipingQin.github.io]</p>\n<p><a href=\"http://moxfive.coding.me/yelee/1.Getting-Started/i18n.html\">http://moxfive.coding.me/yelee/1.Getting-Started/i18n.html</a></p>\n"},{"title":"我的书单","_content":"\n# 1月份 \n\n- 黑客与画家 {已读完}\n\n# 2月份\n\n- 穷爸爸富爸爸 {已读完}\n- 当呼吸化为空气 {已读完}\n- Java特种兵\n- Android开发高手进阶 \n- Android艺术开发探索 {已读完}\n- 软件调试艺术\n","source":"_posts/我的书单.md","raw":"\n---\ntitle: 我的书单\n---\n\n# 1月份 \n\n- 黑客与画家 {已读完}\n\n# 2月份\n\n- 穷爸爸富爸爸 {已读完}\n- 当呼吸化为空气 {已读完}\n- Java特种兵\n- Android开发高手进阶 \n- Android艺术开发探索 {已读完}\n- 软件调试艺术\n","slug":"我的书单","published":1,"date":"2017-02-05T08:38:02.000Z","updated":"2017-02-27T05:57:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q6h000glyjd6eko5ww5","content":"<h1 id=\"1月份\"><a href=\"#1月份\" class=\"headerlink\" title=\"1月份\"></a>1月份</h1><ul>\n<li>黑客与画家 {已读完}</li>\n</ul>\n<h1 id=\"2月份\"><a href=\"#2月份\" class=\"headerlink\" title=\"2月份\"></a>2月份</h1><ul>\n<li>穷爸爸富爸爸 {已读完}</li>\n<li>当呼吸化为空气 {已读完}</li>\n<li>Java特种兵</li>\n<li>Android开发高手进阶 </li>\n<li>Android艺术开发探索 {已读完}</li>\n<li>软件调试艺术</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"1月份\"><a href=\"#1月份\" class=\"headerlink\" title=\"1月份\"></a>1月份</h1><ul>\n<li>黑客与画家 {已读完}</li>\n</ul>\n<h1 id=\"2月份\"><a href=\"#2月份\" class=\"headerlink\" title=\"2月份\"></a>2月份</h1><ul>\n<li>穷爸爸富爸爸 {已读完}</li>\n<li>当呼吸化为空气 {已读完}</li>\n<li>Java特种兵</li>\n<li>Android开发高手进阶 </li>\n<li>Android艺术开发探索 {已读完}</li>\n<li>软件调试艺术</li>\n</ul>\n"},{"title":"配置Github博客","_content":"1.配置github: 先设置用户名和信息\ngit config --global user.name \"weipingQin\"\ngit config --global user.email \"995308963@qq.com\"\n\n2.生成key命令 \nssh-keygen -t rsa -C \"995308963@qq.com\"\n\n3.非常重要的一点:将本地的密钥识别 \nssh-add ~/.ssh/id_github_rsa\n\n4.执行命令 看是否识别 \nssh -T git@github.com\n\n5.出现 welcome to Git@github 表示成功 \n\n6.其他资料[http://www.jianshu.com/p/fbbf6efb50ba]\n\n\n","source":"_posts/配置github环境命令.md","raw":"\n---\ntitle: 配置github博客\n---\n1.配置github: 先设置用户名和信息\ngit config --global user.name \"weipingQin\"\ngit config --global user.email \"995308963@qq.com\"\n\n2.生成key命令 \nssh-keygen -t rsa -C \"995308963@qq.com\"\n\n3.非常重要的一点:将本地的密钥识别 \nssh-add ~/.ssh/id_github_rsa\n\n4.执行命令 看是否识别 \nssh -T git@github.com\n\n5.出现 welcome to Git@github 表示成功 \n\n6.其他资料[http://www.jianshu.com/p/fbbf6efb50ba]\n\n\n","slug":"配置github环境命令","published":1,"date":"2017-01-04T07:08:51.000Z","updated":"2017-01-15T02:43:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpq0q6j000hlyjdy8di7mmo","content":"<p>1.配置github: 先设置用户名和信息<br>git config –global user.name “weipingQin”<br>git config –global user.email “995308963@qq.com”</p>\n<p>2.生成key命令<br>ssh-keygen -t rsa -C “995308963@qq.com”</p>\n<p>3.非常重要的一点:将本地的密钥识别<br>ssh-add ~/.ssh/id_github_rsa</p>\n<p>4.执行命令 看是否识别<br>ssh -T git@github.com</p>\n<p>5.出现 welcome to Git@github 表示成功 </p>\n<p>6.其他资料[<a href=\"http://www.jianshu.com/p/fbbf6efb50ba\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/fbbf6efb50ba</a>]</p>\n","excerpt":"","more":"<p>1.配置github: 先设置用户名和信息<br>git config –global user.name “weipingQin”<br>git config –global user.email “995308963@qq.com”</p>\n<p>2.生成key命令<br>ssh-keygen -t rsa -C “995308963@qq.com”</p>\n<p>3.非常重要的一点:将本地的密钥识别<br>ssh-add ~/.ssh/id_github_rsa</p>\n<p>4.执行命令 看是否识别<br>ssh -T git@github.com</p>\n<p>5.出现 welcome to Git@github 表示成功 </p>\n<p>6.其他资料[<a href=\"http://www.jianshu.com/p/fbbf6efb50ba\">http://www.jianshu.com/p/fbbf6efb50ba</a>]</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}